
LAB3_EX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fb0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030e0  080030e0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080030e0  080030e0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030e0  080030e0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030e0  080030e0  000130e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030e4  080030e4  000130e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080030e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000018  08003100  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003100  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000098e1  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b83  00000000  00000000  00029922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002b4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002bef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e94  00000000  00000000  0002c838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfe4  00000000  00000000  000436cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823b5  00000000  00000000  0004f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1a65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002948  00000000  00000000  000d1ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	080030a4 	.word	0x080030a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	080030a4 	.word	0x080030a4

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <initButton>:
int button_flag[NO_OF_BUTTONS];
int TimerForKeyPressed[NO_OF_BUTTONS];


void initButton()
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_BUTTONS; i++)
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	e020      	b.n	80006a2 <initButton+0x4e>
	{
		buttonDebounce0[i] = NORMAL_STATE;
 8000660:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <initButton+0x60>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2101      	movs	r1, #1
 8000666:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		buttonDebounce1[i] = NORMAL_STATE;
 800066a:	4a13      	ldr	r2, [pc, #76]	; (80006b8 <initButton+0x64>)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2101      	movs	r1, #1
 8000670:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		buttonDebounce2[i] = NORMAL_STATE;
 8000674:	4a11      	ldr	r2, [pc, #68]	; (80006bc <initButton+0x68>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2101      	movs	r1, #1
 800067a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		buttonLastStage[i] = NORMAL_STATE;
 800067e:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <initButton+0x6c>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2101      	movs	r1, #1
 8000684:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		button_flag[i] = 0;
 8000688:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <initButton+0x70>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2100      	movs	r1, #0
 800068e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		TimerForKeyPressed[i] = 200;
 8000692:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <initButton+0x74>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	21c8      	movs	r1, #200	; 0xc8
 8000698:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NO_OF_BUTTONS; i++)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	3301      	adds	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	dddb      	ble.n	8000660 <initButton+0xc>
	}
}
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	2000009c 	.word	0x2000009c
 80006b8:	200000a8 	.word	0x200000a8
 80006bc:	20000090 	.word	0x20000090
 80006c0:	2000006c 	.word	0x2000006c
 80006c4:	20000084 	.word	0x20000084
 80006c8:	20000078 	.word	0x20000078

080006cc <isButtonPressed>:


int isButtonPressed(int idx)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	if (button_flag[idx] == 1)
 80006d4:	4a09      	ldr	r2, [pc, #36]	; (80006fc <isButtonPressed+0x30>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d106      	bne.n	80006ee <isButtonPressed+0x22>
	{
		button_flag[idx] = 0;
 80006e0:	4a06      	ldr	r2, [pc, #24]	; (80006fc <isButtonPressed+0x30>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2100      	movs	r1, #0
 80006e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e000      	b.n	80006f0 <isButtonPressed+0x24>
	}
	return 0;
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000084 	.word	0x20000084

08000700 <subKeyProcess>:

void subKeyProcess(int idx)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	button_flag[idx] = 1;
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <subKeyProcess+0x1c>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2101      	movs	r1, #1
 800070e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	20000084 	.word	0x20000084

08000720 <getKeyInput>:

void getKeyInput()
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_BUTTONS; i++)
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	e07e      	b.n	800082a <getKeyInput+0x10a>
	{
		buttonDebounce0[i] = buttonDebounce1[i];
 800072c:	4a43      	ldr	r2, [pc, #268]	; (800083c <getKeyInput+0x11c>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000734:	4942      	ldr	r1, [pc, #264]	; (8000840 <getKeyInput+0x120>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		buttonDebounce1[i] = buttonDebounce2[i];
 800073c:	4a41      	ldr	r2, [pc, #260]	; (8000844 <getKeyInput+0x124>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000744:	493d      	ldr	r1, [pc, #244]	; (800083c <getKeyInput+0x11c>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		switch(i)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b02      	cmp	r3, #2
 8000750:	d021      	beq.n	8000796 <getKeyInput+0x76>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b02      	cmp	r3, #2
 8000756:	dc2a      	bgt.n	80007ae <getKeyInput+0x8e>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d003      	beq.n	8000766 <getKeyInput+0x46>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b01      	cmp	r3, #1
 8000762:	d00c      	beq.n	800077e <getKeyInput+0x5e>
				break;
			case 2:
				buttonDebounce2[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
				break;
			default:
				break;
 8000764:	e023      	b.n	80007ae <getKeyInput+0x8e>
				buttonDebounce2[i] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076a:	4837      	ldr	r0, [pc, #220]	; (8000848 <getKeyInput+0x128>)
 800076c:	f001 fc62 	bl	8002034 <HAL_GPIO_ReadPin>
 8000770:	4603      	mov	r3, r0
 8000772:	4619      	mov	r1, r3
 8000774:	4a33      	ldr	r2, [pc, #204]	; (8000844 <getKeyInput+0x124>)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800077c:	e018      	b.n	80007b0 <getKeyInput+0x90>
				buttonDebounce2[i] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 800077e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000782:	4831      	ldr	r0, [pc, #196]	; (8000848 <getKeyInput+0x128>)
 8000784:	f001 fc56 	bl	8002034 <HAL_GPIO_ReadPin>
 8000788:	4603      	mov	r3, r0
 800078a:	4619      	mov	r1, r3
 800078c:	4a2d      	ldr	r2, [pc, #180]	; (8000844 <getKeyInput+0x124>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000794:	e00c      	b.n	80007b0 <getKeyInput+0x90>
				buttonDebounce2[i] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8000796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800079a:	482b      	ldr	r0, [pc, #172]	; (8000848 <getKeyInput+0x128>)
 800079c:	f001 fc4a 	bl	8002034 <HAL_GPIO_ReadPin>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4619      	mov	r1, r3
 80007a4:	4a27      	ldr	r2, [pc, #156]	; (8000844 <getKeyInput+0x124>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 80007ac:	e000      	b.n	80007b0 <getKeyInput+0x90>
				break;
 80007ae:	bf00      	nop
		}
		if (buttonDebounce0[i] == buttonDebounce1[i] && buttonDebounce1[i] == buttonDebounce2[i])
 80007b0:	4a23      	ldr	r2, [pc, #140]	; (8000840 <getKeyInput+0x120>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007b8:	4920      	ldr	r1, [pc, #128]	; (800083c <getKeyInput+0x11c>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d12f      	bne.n	8000824 <getKeyInput+0x104>
 80007c4:	4a1d      	ldr	r2, [pc, #116]	; (800083c <getKeyInput+0x11c>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007cc:	491d      	ldr	r1, [pc, #116]	; (8000844 <getKeyInput+0x124>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d125      	bne.n	8000824 <getKeyInput+0x104>
		{
			if (buttonLastStage[i] != buttonDebounce2[i])
 80007d8:	4a1c      	ldr	r2, [pc, #112]	; (800084c <getKeyInput+0x12c>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007e0:	4918      	ldr	r1, [pc, #96]	; (8000844 <getKeyInput+0x124>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d01b      	beq.n	8000824 <getKeyInput+0x104>
			{
				buttonLastStage[i] = buttonDebounce2[i];
 80007ec:	4a15      	ldr	r2, [pc, #84]	; (8000844 <getKeyInput+0x124>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007f4:	4915      	ldr	r1, [pc, #84]	; (800084c <getKeyInput+0x12c>)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (buttonDebounce2[i] == PRESSED_STATE)
 80007fc:	4a11      	ldr	r2, [pc, #68]	; (8000844 <getKeyInput+0x124>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d108      	bne.n	800081a <getKeyInput+0xfa>
				{
					//TODO
					subKeyProcess(i);
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff79 	bl	8000700 <subKeyProcess>
					TimerForKeyPressed[i] = 200;
 800080e:	4a10      	ldr	r2, [pc, #64]	; (8000850 <getKeyInput+0x130>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	21c8      	movs	r1, #200	; 0xc8
 8000814:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000818:	e004      	b.n	8000824 <getKeyInput+0x104>
				}
				else
				{
					buttonLastStage[i] = NORMAL_STATE;
 800081a:	4a0c      	ldr	r2, [pc, #48]	; (800084c <getKeyInput+0x12c>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2101      	movs	r1, #1
 8000820:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NO_OF_BUTTONS; i++)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3301      	adds	r3, #1
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2b02      	cmp	r3, #2
 800082e:	f77f af7d 	ble.w	800072c <getKeyInput+0xc>
				}
			}
		}

	}
}
 8000832:	bf00      	nop
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200000a8 	.word	0x200000a8
 8000840:	2000009c 	.word	0x2000009c
 8000844:	20000090 	.word	0x20000090
 8000848:	40011000 	.word	0x40011000
 800084c:	2000006c 	.word	0x2000006c
 8000850:	20000078 	.word	0x20000078

08000854 <fsm_init>:


#include "fsm_automatic.h"

void fsm_init()
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
	redCounter = redDuration / 1000;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <fsm_init+0x50>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <fsm_init+0x54>)
 800085e:	fb82 1203 	smull	r1, r2, r2, r3
 8000862:	1192      	asrs	r2, r2, #6
 8000864:	17db      	asrs	r3, r3, #31
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	4a10      	ldr	r2, [pc, #64]	; (80008ac <fsm_init+0x58>)
 800086a:	6013      	str	r3, [r2, #0]
	greenCounter = greenDuration / 1000;
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <fsm_init+0x5c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <fsm_init+0x54>)
 8000872:	fb82 1203 	smull	r1, r2, r2, r3
 8000876:	1192      	asrs	r2, r2, #6
 8000878:	17db      	asrs	r3, r3, #31
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	4a0d      	ldr	r2, [pc, #52]	; (80008b4 <fsm_init+0x60>)
 800087e:	6013      	str	r3, [r2, #0]
	amberCounter = amberDuration / 1000;
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <fsm_init+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <fsm_init+0x54>)
 8000886:	fb82 1203 	smull	r1, r2, r2, r3
 800088a:	1192      	asrs	r2, r2, #6
 800088c:	17db      	asrs	r3, r3, #31
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <fsm_init+0x68>)
 8000892:	6013      	str	r3, [r2, #0]
	mode = 1;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <fsm_init+0x6c>)
 8000896:	2201      	movs	r2, #1
 8000898:	601a      	str	r2, [r3, #0]
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000000 	.word	0x20000000
 80008a8:	10624dd3 	.word	0x10624dd3
 80008ac:	200000c0 	.word	0x200000c0
 80008b0:	20000004 	.word	0x20000004
 80008b4:	200000bc 	.word	0x200000bc
 80008b8:	20000008 	.word	0x20000008
 80008bc:	200000b4 	.word	0x200000b4
 80008c0:	20000040 	.word	0x20000040

080008c4 <fsm_automatic_run>:

void fsm_automatic_run(){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

	if (isButtonPressed(0))
 80008c8:	2000      	movs	r0, #0
 80008ca:	f7ff feff 	bl	80006cc <isButtonPressed>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d019      	beq.n	8000908 <fsm_automatic_run+0x44>
	{
		clearAllLed();
 80008d4:	f000 fce0 	bl	8001298 <clearAllLed>
		status = MAN_RED;
 80008d8:	4b7f      	ldr	r3, [pc, #508]	; (8000ad8 <fsm_automatic_run+0x214>)
 80008da:	220b      	movs	r2, #11
 80008dc:	601a      	str	r2, [r3, #0]
		mode = 2;
 80008de:	4b7f      	ldr	r3, [pc, #508]	; (8000adc <fsm_automatic_run+0x218>)
 80008e0:	2202      	movs	r2, #2
 80008e2:	601a      	str	r2, [r3, #0]
		tempRed = redDuration;
 80008e4:	4b7e      	ldr	r3, [pc, #504]	; (8000ae0 <fsm_automatic_run+0x21c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a7e      	ldr	r2, [pc, #504]	; (8000ae4 <fsm_automatic_run+0x220>)
 80008ea:	6013      	str	r3, [r2, #0]
		tempGreen = greenDuration;
 80008ec:	4b7e      	ldr	r3, [pc, #504]	; (8000ae8 <fsm_automatic_run+0x224>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a7e      	ldr	r2, [pc, #504]	; (8000aec <fsm_automatic_run+0x228>)
 80008f2:	6013      	str	r3, [r2, #0]
		tempAmber = amberDuration;
 80008f4:	4b7e      	ldr	r3, [pc, #504]	; (8000af0 <fsm_automatic_run+0x22c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a7e      	ldr	r2, [pc, #504]	; (8000af4 <fsm_automatic_run+0x230>)
 80008fa:	6013      	str	r3, [r2, #0]
		isButtonPressed(1);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff fee5 	bl	80006cc <isButtonPressed>
		isButtonPressed(2);
 8000902:	2002      	movs	r0, #2
 8000904:	f7ff fee2 	bl	80006cc <isButtonPressed>
	}
	switch (status)
 8000908:	4b73      	ldr	r3, [pc, #460]	; (8000ad8 <fsm_automatic_run+0x214>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b04      	cmp	r3, #4
 800090e:	f200 80cc 	bhi.w	8000aaa <fsm_automatic_run+0x1e6>
 8000912:	a201      	add	r2, pc, #4	; (adr r2, 8000918 <fsm_automatic_run+0x54>)
 8000914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000918:	0800092d 	.word	0x0800092d
 800091c:	0800093d 	.word	0x0800093d
 8000920:	08000993 	.word	0x08000993
 8000924:	080009f5 	.word	0x080009f5
 8000928:	08000a49 	.word	0x08000a49
	{
		case INIT:
			clearAllLed();
 800092c:	f000 fcb4 	bl	8001298 <clearAllLed>
			status = RED_GREEN;
 8000930:	4b69      	ldr	r3, [pc, #420]	; (8000ad8 <fsm_automatic_run+0x214>)
 8000932:	2201      	movs	r2, #1
 8000934:	601a      	str	r2, [r3, #0]
			fsm_init();
 8000936:	f7ff ff8d 	bl	8000854 <fsm_init>

			break;
 800093a:	e0bf      	b.n	8000abc <fsm_automatic_run+0x1f8>
		case RED_GREEN:

			turnOnLed(RED);
 800093c:	2000      	movs	r0, #0
 800093e:	f000 fccf 	bl	80012e0 <turnOnLed>
			turnOnLed(GREEN2);
 8000942:	2003      	movs	r0, #3
 8000944:	f000 fccc 	bl	80012e0 <turnOnLed>

			road1 = redCounter;
 8000948:	4b6b      	ldr	r3, [pc, #428]	; (8000af8 <fsm_automatic_run+0x234>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a6b      	ldr	r2, [pc, #428]	; (8000afc <fsm_automatic_run+0x238>)
 800094e:	6013      	str	r3, [r2, #0]
			road2 = greenCounter;
 8000950:	4b6b      	ldr	r3, [pc, #428]	; (8000b00 <fsm_automatic_run+0x23c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a6b      	ldr	r2, [pc, #428]	; (8000b04 <fsm_automatic_run+0x240>)
 8000956:	6013      	str	r3, [r2, #0]

			redCounter--;
 8000958:	4b67      	ldr	r3, [pc, #412]	; (8000af8 <fsm_automatic_run+0x234>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	3b01      	subs	r3, #1
 800095e:	4a66      	ldr	r2, [pc, #408]	; (8000af8 <fsm_automatic_run+0x234>)
 8000960:	6013      	str	r3, [r2, #0]
			greenCounter--;
 8000962:	4b67      	ldr	r3, [pc, #412]	; (8000b00 <fsm_automatic_run+0x23c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	3b01      	subs	r3, #1
 8000968:	4a65      	ldr	r2, [pc, #404]	; (8000b00 <fsm_automatic_run+0x23c>)
 800096a:	6013      	str	r3, [r2, #0]


			if (greenCounter <= 0)
 800096c:	4b64      	ldr	r3, [pc, #400]	; (8000b00 <fsm_automatic_run+0x23c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	f300 809c 	bgt.w	8000aae <fsm_automatic_run+0x1ea>
			{
				status = RED_AMBER;
 8000976:	4b58      	ldr	r3, [pc, #352]	; (8000ad8 <fsm_automatic_run+0x214>)
 8000978:	2202      	movs	r2, #2
 800097a:	601a      	str	r2, [r3, #0]
				amberCounter = amberDuration / 1000;
 800097c:	4b5c      	ldr	r3, [pc, #368]	; (8000af0 <fsm_automatic_run+0x22c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a61      	ldr	r2, [pc, #388]	; (8000b08 <fsm_automatic_run+0x244>)
 8000982:	fb82 1203 	smull	r1, r2, r2, r3
 8000986:	1192      	asrs	r2, r2, #6
 8000988:	17db      	asrs	r3, r3, #31
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	4a5f      	ldr	r2, [pc, #380]	; (8000b0c <fsm_automatic_run+0x248>)
 800098e:	6013      	str	r3, [r2, #0]
			}
			break;
 8000990:	e08d      	b.n	8000aae <fsm_automatic_run+0x1ea>
		case RED_AMBER:
			turnOnLed(AMBER2);
 8000992:	2005      	movs	r0, #5
 8000994:	f000 fca4 	bl	80012e0 <turnOnLed>

			road1 = redCounter;
 8000998:	4b57      	ldr	r3, [pc, #348]	; (8000af8 <fsm_automatic_run+0x234>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a57      	ldr	r2, [pc, #348]	; (8000afc <fsm_automatic_run+0x238>)
 800099e:	6013      	str	r3, [r2, #0]
			road2 = amberCounter;
 80009a0:	4b5a      	ldr	r3, [pc, #360]	; (8000b0c <fsm_automatic_run+0x248>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a57      	ldr	r2, [pc, #348]	; (8000b04 <fsm_automatic_run+0x240>)
 80009a6:	6013      	str	r3, [r2, #0]

			redCounter--;
 80009a8:	4b53      	ldr	r3, [pc, #332]	; (8000af8 <fsm_automatic_run+0x234>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3b01      	subs	r3, #1
 80009ae:	4a52      	ldr	r2, [pc, #328]	; (8000af8 <fsm_automatic_run+0x234>)
 80009b0:	6013      	str	r3, [r2, #0]
			amberCounter--;
 80009b2:	4b56      	ldr	r3, [pc, #344]	; (8000b0c <fsm_automatic_run+0x248>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	4a54      	ldr	r2, [pc, #336]	; (8000b0c <fsm_automatic_run+0x248>)
 80009ba:	6013      	str	r3, [r2, #0]

			if (redCounter <= 0)
 80009bc:	4b4e      	ldr	r3, [pc, #312]	; (8000af8 <fsm_automatic_run+0x234>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	dc76      	bgt.n	8000ab2 <fsm_automatic_run+0x1ee>
			{
				status = GREEN_RED;
 80009c4:	4b44      	ldr	r3, [pc, #272]	; (8000ad8 <fsm_automatic_run+0x214>)
 80009c6:	2203      	movs	r2, #3
 80009c8:	601a      	str	r2, [r3, #0]

				redCounter = redDuration / 1000;
 80009ca:	4b45      	ldr	r3, [pc, #276]	; (8000ae0 <fsm_automatic_run+0x21c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a4e      	ldr	r2, [pc, #312]	; (8000b08 <fsm_automatic_run+0x244>)
 80009d0:	fb82 1203 	smull	r1, r2, r2, r3
 80009d4:	1192      	asrs	r2, r2, #6
 80009d6:	17db      	asrs	r3, r3, #31
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	4a47      	ldr	r2, [pc, #284]	; (8000af8 <fsm_automatic_run+0x234>)
 80009dc:	6013      	str	r3, [r2, #0]
				greenCounter = greenDuration / 1000;
 80009de:	4b42      	ldr	r3, [pc, #264]	; (8000ae8 <fsm_automatic_run+0x224>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a49      	ldr	r2, [pc, #292]	; (8000b08 <fsm_automatic_run+0x244>)
 80009e4:	fb82 1203 	smull	r1, r2, r2, r3
 80009e8:	1192      	asrs	r2, r2, #6
 80009ea:	17db      	asrs	r3, r3, #31
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	4a44      	ldr	r2, [pc, #272]	; (8000b00 <fsm_automatic_run+0x23c>)
 80009f0:	6013      	str	r3, [r2, #0]

			}
			break;
 80009f2:	e05e      	b.n	8000ab2 <fsm_automatic_run+0x1ee>
		case GREEN_RED:
			turnOnLed(GREEN);
 80009f4:	2002      	movs	r0, #2
 80009f6:	f000 fc73 	bl	80012e0 <turnOnLed>
			turnOnLed(RED2);
 80009fa:	2001      	movs	r0, #1
 80009fc:	f000 fc70 	bl	80012e0 <turnOnLed>

			road1 = greenCounter;
 8000a00:	4b3f      	ldr	r3, [pc, #252]	; (8000b00 <fsm_automatic_run+0x23c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a3d      	ldr	r2, [pc, #244]	; (8000afc <fsm_automatic_run+0x238>)
 8000a06:	6013      	str	r3, [r2, #0]
			road2 = redCounter;
 8000a08:	4b3b      	ldr	r3, [pc, #236]	; (8000af8 <fsm_automatic_run+0x234>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a3d      	ldr	r2, [pc, #244]	; (8000b04 <fsm_automatic_run+0x240>)
 8000a0e:	6013      	str	r3, [r2, #0]

			redCounter--;
 8000a10:	4b39      	ldr	r3, [pc, #228]	; (8000af8 <fsm_automatic_run+0x234>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	4a38      	ldr	r2, [pc, #224]	; (8000af8 <fsm_automatic_run+0x234>)
 8000a18:	6013      	str	r3, [r2, #0]
			greenCounter--;
 8000a1a:	4b39      	ldr	r3, [pc, #228]	; (8000b00 <fsm_automatic_run+0x23c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	4a37      	ldr	r2, [pc, #220]	; (8000b00 <fsm_automatic_run+0x23c>)
 8000a22:	6013      	str	r3, [r2, #0]

			if (greenCounter <= 0)
 8000a24:	4b36      	ldr	r3, [pc, #216]	; (8000b00 <fsm_automatic_run+0x23c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	dc44      	bgt.n	8000ab6 <fsm_automatic_run+0x1f2>
			{
				status = AMBER_RED;
 8000a2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <fsm_automatic_run+0x214>)
 8000a2e:	2204      	movs	r2, #4
 8000a30:	601a      	str	r2, [r3, #0]
				amberCounter = amberDuration / 1000;
 8000a32:	4b2f      	ldr	r3, [pc, #188]	; (8000af0 <fsm_automatic_run+0x22c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a34      	ldr	r2, [pc, #208]	; (8000b08 <fsm_automatic_run+0x244>)
 8000a38:	fb82 1203 	smull	r1, r2, r2, r3
 8000a3c:	1192      	asrs	r2, r2, #6
 8000a3e:	17db      	asrs	r3, r3, #31
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	4a32      	ldr	r2, [pc, #200]	; (8000b0c <fsm_automatic_run+0x248>)
 8000a44:	6013      	str	r3, [r2, #0]

			}
			break;
 8000a46:	e036      	b.n	8000ab6 <fsm_automatic_run+0x1f2>
		case AMBER_RED:
			turnOnLed(AMBER);
 8000a48:	2004      	movs	r0, #4
 8000a4a:	f000 fc49 	bl	80012e0 <turnOnLed>

			road1 = amberCounter;
 8000a4e:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <fsm_automatic_run+0x248>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a2a      	ldr	r2, [pc, #168]	; (8000afc <fsm_automatic_run+0x238>)
 8000a54:	6013      	str	r3, [r2, #0]
			road2 = redCounter;
 8000a56:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <fsm_automatic_run+0x234>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a2a      	ldr	r2, [pc, #168]	; (8000b04 <fsm_automatic_run+0x240>)
 8000a5c:	6013      	str	r3, [r2, #0]

			redCounter--;
 8000a5e:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <fsm_automatic_run+0x234>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	4a24      	ldr	r2, [pc, #144]	; (8000af8 <fsm_automatic_run+0x234>)
 8000a66:	6013      	str	r3, [r2, #0]
			amberCounter--;
 8000a68:	4b28      	ldr	r3, [pc, #160]	; (8000b0c <fsm_automatic_run+0x248>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	4a27      	ldr	r2, [pc, #156]	; (8000b0c <fsm_automatic_run+0x248>)
 8000a70:	6013      	str	r3, [r2, #0]

			if (redCounter <= 0)
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <fsm_automatic_run+0x234>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	dc1f      	bgt.n	8000aba <fsm_automatic_run+0x1f6>
			{
				status = RED_GREEN;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <fsm_automatic_run+0x214>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	601a      	str	r2, [r3, #0]

				redCounter = redDuration / 1000;
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <fsm_automatic_run+0x21c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a20      	ldr	r2, [pc, #128]	; (8000b08 <fsm_automatic_run+0x244>)
 8000a86:	fb82 1203 	smull	r1, r2, r2, r3
 8000a8a:	1192      	asrs	r2, r2, #6
 8000a8c:	17db      	asrs	r3, r3, #31
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	4a19      	ldr	r2, [pc, #100]	; (8000af8 <fsm_automatic_run+0x234>)
 8000a92:	6013      	str	r3, [r2, #0]
				greenCounter = greenDuration / 1000;
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <fsm_automatic_run+0x224>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <fsm_automatic_run+0x244>)
 8000a9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a9e:	1192      	asrs	r2, r2, #6
 8000aa0:	17db      	asrs	r3, r3, #31
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	4a16      	ldr	r2, [pc, #88]	; (8000b00 <fsm_automatic_run+0x23c>)
 8000aa6:	6013      	str	r3, [r2, #0]

			}
			break;
 8000aa8:	e007      	b.n	8000aba <fsm_automatic_run+0x1f6>
		default:
			break;
 8000aaa:	bf00      	nop
 8000aac:	e006      	b.n	8000abc <fsm_automatic_run+0x1f8>
			break;
 8000aae:	bf00      	nop
 8000ab0:	e004      	b.n	8000abc <fsm_automatic_run+0x1f8>
			break;
 8000ab2:	bf00      	nop
 8000ab4:	e002      	b.n	8000abc <fsm_automatic_run+0x1f8>
			break;
 8000ab6:	bf00      	nop
 8000ab8:	e000      	b.n	8000abc <fsm_automatic_run+0x1f8>
			break;
 8000aba:	bf00      	nop
	}
	if (mode == 1)
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <fsm_automatic_run+0x218>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d107      	bne.n	8000ad4 <fsm_automatic_run+0x210>
	{
		updateLedBuffer(road1, road2);
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <fsm_automatic_run+0x238>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <fsm_automatic_run+0x240>)
 8000aca:	6812      	ldr	r2, [r2, #0]
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 fba6 	bl	8001220 <updateLedBuffer>
	}


}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000034 	.word	0x20000034
 8000adc:	20000040 	.word	0x20000040
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	200000b8 	.word	0x200000b8
 8000ae8:	20000004 	.word	0x20000004
 8000aec:	200000c8 	.word	0x200000c8
 8000af0:	20000008 	.word	0x20000008
 8000af4:	200000c4 	.word	0x200000c4
 8000af8:	200000c0 	.word	0x200000c0
 8000afc:	20000038 	.word	0x20000038
 8000b00:	200000bc 	.word	0x200000bc
 8000b04:	2000003c 	.word	0x2000003c
 8000b08:	10624dd3 	.word	0x10624dd3
 8000b0c:	200000b4 	.word	0x200000b4

08000b10 <fsm_manual_run>:


#include "fsm_manual.h"

void fsm_manual_run()
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	switch (status)
 8000b14:	4b9e      	ldr	r3, [pc, #632]	; (8000d90 <fsm_manual_run+0x280>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3b0b      	subs	r3, #11
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	f200 812e 	bhi.w	8000d7c <fsm_manual_run+0x26c>
 8000b20:	a201      	add	r2, pc, #4	; (adr r2, 8000b28 <fsm_manual_run+0x18>)
 8000b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b26:	bf00      	nop
 8000b28:	08000b39 	.word	0x08000b39
 8000b2c:	08000c45 	.word	0x08000c45
 8000b30:	08000bbf 	.word	0x08000bbf
 8000b34:	08000d1b 	.word	0x08000d1b
	{
		case MAN_RED:
			blinkingLed(RED);
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f000 fc51 	bl	80013e0 <blinkingLed>
			updateLedBuffer(mode, redDuration / 1000);
 8000b3e:	4b95      	ldr	r3, [pc, #596]	; (8000d94 <fsm_manual_run+0x284>)
 8000b40:	6818      	ldr	r0, [r3, #0]
 8000b42:	4b95      	ldr	r3, [pc, #596]	; (8000d98 <fsm_manual_run+0x288>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a95      	ldr	r2, [pc, #596]	; (8000d9c <fsm_manual_run+0x28c>)
 8000b48:	fb82 1203 	smull	r1, r2, r2, r3
 8000b4c:	1192      	asrs	r2, r2, #6
 8000b4e:	17db      	asrs	r3, r3, #31
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	4619      	mov	r1, r3
 8000b54:	f000 fb64 	bl	8001220 <updateLedBuffer>
			if (isButtonPressed(0))
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff fdb7 	bl	80006cc <isButtonPressed>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d00f      	beq.n	8000b84 <fsm_manual_run+0x74>
			{
				if(!isButtonPressed(2))
 8000b64:	2002      	movs	r0, #2
 8000b66:	f7ff fdb1 	bl	80006cc <isButtonPressed>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d103      	bne.n	8000b78 <fsm_manual_run+0x68>
				{
					redDuration = tempRed;
 8000b70:	4b8b      	ldr	r3, [pc, #556]	; (8000da0 <fsm_manual_run+0x290>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a88      	ldr	r2, [pc, #544]	; (8000d98 <fsm_manual_run+0x288>)
 8000b76:	6013      	str	r3, [r2, #0]
				}
				status = MAN_AMBER;
 8000b78:	4b85      	ldr	r3, [pc, #532]	; (8000d90 <fsm_manual_run+0x280>)
 8000b7a:	220d      	movs	r2, #13
 8000b7c:	601a      	str	r2, [r3, #0]
				mode = 3;
 8000b7e:	4b85      	ldr	r3, [pc, #532]	; (8000d94 <fsm_manual_run+0x284>)
 8000b80:	2203      	movs	r2, #3
 8000b82:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(1) && mode == 2)
 8000b84:	2001      	movs	r0, #1
 8000b86:	f7ff fda1 	bl	80006cc <isButtonPressed>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f000 80f7 	beq.w	8000d80 <fsm_manual_run+0x270>
 8000b92:	4b80      	ldr	r3, [pc, #512]	; (8000d94 <fsm_manual_run+0x284>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	f040 80f2 	bne.w	8000d80 <fsm_manual_run+0x270>
			{
				redDuration += 1000;
 8000b9c:	4b7e      	ldr	r3, [pc, #504]	; (8000d98 <fsm_manual_run+0x288>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000ba4:	4a7c      	ldr	r2, [pc, #496]	; (8000d98 <fsm_manual_run+0x288>)
 8000ba6:	6013      	str	r3, [r2, #0]
				if (redDuration > 99000)
 8000ba8:	4b7b      	ldr	r3, [pc, #492]	; (8000d98 <fsm_manual_run+0x288>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a7d      	ldr	r2, [pc, #500]	; (8000da4 <fsm_manual_run+0x294>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	f340 80e6 	ble.w	8000d80 <fsm_manual_run+0x270>
				{
					redDuration = 1000;
 8000bb4:	4b78      	ldr	r3, [pc, #480]	; (8000d98 <fsm_manual_run+0x288>)
 8000bb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bba:	601a      	str	r2, [r3, #0]
				}
			}

			break;
 8000bbc:	e0e0      	b.n	8000d80 <fsm_manual_run+0x270>
		case MAN_AMBER:
			blinkingLed(AMBER);
 8000bbe:	2004      	movs	r0, #4
 8000bc0:	f000 fc0e 	bl	80013e0 <blinkingLed>
			updateLedBuffer(mode, amberDuration / 1000);
 8000bc4:	4b73      	ldr	r3, [pc, #460]	; (8000d94 <fsm_manual_run+0x284>)
 8000bc6:	6818      	ldr	r0, [r3, #0]
 8000bc8:	4b77      	ldr	r3, [pc, #476]	; (8000da8 <fsm_manual_run+0x298>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a73      	ldr	r2, [pc, #460]	; (8000d9c <fsm_manual_run+0x28c>)
 8000bce:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd2:	1192      	asrs	r2, r2, #6
 8000bd4:	17db      	asrs	r3, r3, #31
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f000 fb21 	bl	8001220 <updateLedBuffer>
			if (isButtonPressed(0))
 8000bde:	2000      	movs	r0, #0
 8000be0:	f7ff fd74 	bl	80006cc <isButtonPressed>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d00f      	beq.n	8000c0a <fsm_manual_run+0xfa>
			{
				if(!isButtonPressed(2))
 8000bea:	2002      	movs	r0, #2
 8000bec:	f7ff fd6e 	bl	80006cc <isButtonPressed>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d103      	bne.n	8000bfe <fsm_manual_run+0xee>
				{
					amberDuration = tempAmber;
 8000bf6:	4b6d      	ldr	r3, [pc, #436]	; (8000dac <fsm_manual_run+0x29c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a6b      	ldr	r2, [pc, #428]	; (8000da8 <fsm_manual_run+0x298>)
 8000bfc:	6013      	str	r3, [r2, #0]
				}
				status = MAN_GREEN;
 8000bfe:	4b64      	ldr	r3, [pc, #400]	; (8000d90 <fsm_manual_run+0x280>)
 8000c00:	220c      	movs	r2, #12
 8000c02:	601a      	str	r2, [r3, #0]
				mode = 4;
 8000c04:	4b63      	ldr	r3, [pc, #396]	; (8000d94 <fsm_manual_run+0x284>)
 8000c06:	2204      	movs	r2, #4
 8000c08:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(1)  && mode == 3)
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f7ff fd5e 	bl	80006cc <isButtonPressed>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f000 80b6 	beq.w	8000d84 <fsm_manual_run+0x274>
 8000c18:	4b5e      	ldr	r3, [pc, #376]	; (8000d94 <fsm_manual_run+0x284>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	f040 80b1 	bne.w	8000d84 <fsm_manual_run+0x274>
			{
				amberDuration += 1000;
 8000c22:	4b61      	ldr	r3, [pc, #388]	; (8000da8 <fsm_manual_run+0x298>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000c2a:	4a5f      	ldr	r2, [pc, #380]	; (8000da8 <fsm_manual_run+0x298>)
 8000c2c:	6013      	str	r3, [r2, #0]
				if (amberDuration > 99000)
 8000c2e:	4b5e      	ldr	r3, [pc, #376]	; (8000da8 <fsm_manual_run+0x298>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a5c      	ldr	r2, [pc, #368]	; (8000da4 <fsm_manual_run+0x294>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	f340 80a5 	ble.w	8000d84 <fsm_manual_run+0x274>
				{
					amberDuration = 1000;
 8000c3a:	4b5b      	ldr	r3, [pc, #364]	; (8000da8 <fsm_manual_run+0x298>)
 8000c3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c40:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 8000c42:	e09f      	b.n	8000d84 <fsm_manual_run+0x274>
		case MAN_GREEN:
			blinkingLed(GREEN);
 8000c44:	2002      	movs	r0, #2
 8000c46:	f000 fbcb 	bl	80013e0 <blinkingLed>
			updateLedBuffer(mode, greenDuration / 1000);
 8000c4a:	4b52      	ldr	r3, [pc, #328]	; (8000d94 <fsm_manual_run+0x284>)
 8000c4c:	6818      	ldr	r0, [r3, #0]
 8000c4e:	4b58      	ldr	r3, [pc, #352]	; (8000db0 <fsm_manual_run+0x2a0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a52      	ldr	r2, [pc, #328]	; (8000d9c <fsm_manual_run+0x28c>)
 8000c54:	fb82 1203 	smull	r1, r2, r2, r3
 8000c58:	1192      	asrs	r2, r2, #6
 8000c5a:	17db      	asrs	r3, r3, #31
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f000 fade 	bl	8001220 <updateLedBuffer>
			if (isButtonPressed(0))
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff fd31 	bl	80006cc <isButtonPressed>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d03a      	beq.n	8000ce6 <fsm_manual_run+0x1d6>
			{
				if(!isButtonPressed(2))
 8000c70:	2002      	movs	r0, #2
 8000c72:	f7ff fd2b 	bl	80006cc <isButtonPressed>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d103      	bne.n	8000c84 <fsm_manual_run+0x174>
				{
					greenDuration = tempGreen;
 8000c7c:	4b4d      	ldr	r3, [pc, #308]	; (8000db4 <fsm_manual_run+0x2a4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a4b      	ldr	r2, [pc, #300]	; (8000db0 <fsm_manual_run+0x2a0>)
 8000c82:	6013      	str	r3, [r2, #0]
				}
				if (redDuration == (greenDuration + amberDuration))
 8000c84:	4b4a      	ldr	r3, [pc, #296]	; (8000db0 <fsm_manual_run+0x2a0>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b47      	ldr	r3, [pc, #284]	; (8000da8 <fsm_manual_run+0x298>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	441a      	add	r2, r3
 8000c8e:	4b42      	ldr	r3, [pc, #264]	; (8000d98 <fsm_manual_run+0x288>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d124      	bne.n	8000ce0 <fsm_manual_run+0x1d0>
				{
					status = RED_GREEN;
 8000c96:	4b3e      	ldr	r3, [pc, #248]	; (8000d90 <fsm_manual_run+0x280>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	601a      	str	r2, [r3, #0]
					redCounter = redDuration / 1000;
 8000c9c:	4b3e      	ldr	r3, [pc, #248]	; (8000d98 <fsm_manual_run+0x288>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a3e      	ldr	r2, [pc, #248]	; (8000d9c <fsm_manual_run+0x28c>)
 8000ca2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca6:	1192      	asrs	r2, r2, #6
 8000ca8:	17db      	asrs	r3, r3, #31
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	4a42      	ldr	r2, [pc, #264]	; (8000db8 <fsm_manual_run+0x2a8>)
 8000cae:	6013      	str	r3, [r2, #0]
					greenCounter = greenDuration / 1000;
 8000cb0:	4b3f      	ldr	r3, [pc, #252]	; (8000db0 <fsm_manual_run+0x2a0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a39      	ldr	r2, [pc, #228]	; (8000d9c <fsm_manual_run+0x28c>)
 8000cb6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cba:	1192      	asrs	r2, r2, #6
 8000cbc:	17db      	asrs	r3, r3, #31
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	4a3e      	ldr	r2, [pc, #248]	; (8000dbc <fsm_manual_run+0x2ac>)
 8000cc2:	6013      	str	r3, [r2, #0]
					amberCounter = amberDuration / 1000;
 8000cc4:	4b38      	ldr	r3, [pc, #224]	; (8000da8 <fsm_manual_run+0x298>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a34      	ldr	r2, [pc, #208]	; (8000d9c <fsm_manual_run+0x28c>)
 8000cca:	fb82 1203 	smull	r1, r2, r2, r3
 8000cce:	1192      	asrs	r2, r2, #6
 8000cd0:	17db      	asrs	r3, r3, #31
 8000cd2:	1ad3      	subs	r3, r2, r3
 8000cd4:	4a3a      	ldr	r2, [pc, #232]	; (8000dc0 <fsm_manual_run+0x2b0>)
 8000cd6:	6013      	str	r3, [r2, #0]
					mode = 1;
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <fsm_manual_run+0x284>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	e002      	b.n	8000ce6 <fsm_manual_run+0x1d6>

				}
				else
				{
					status = ERROR;
 8000ce0:	4b2b      	ldr	r3, [pc, #172]	; (8000d90 <fsm_manual_run+0x280>)
 8000ce2:	220e      	movs	r2, #14
 8000ce4:	601a      	str	r2, [r3, #0]
				}
			}
			if (isButtonPressed(1) && mode == 4)
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff fcf0 	bl	80006cc <isButtonPressed>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d04a      	beq.n	8000d88 <fsm_manual_run+0x278>
 8000cf2:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <fsm_manual_run+0x284>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d146      	bne.n	8000d88 <fsm_manual_run+0x278>
			{
				greenDuration += 1000;
 8000cfa:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <fsm_manual_run+0x2a0>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000d02:	4a2b      	ldr	r2, [pc, #172]	; (8000db0 <fsm_manual_run+0x2a0>)
 8000d04:	6013      	str	r3, [r2, #0]
				if (greenDuration > 99000)
 8000d06:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <fsm_manual_run+0x2a0>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a26      	ldr	r2, [pc, #152]	; (8000da4 <fsm_manual_run+0x294>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	dd3b      	ble.n	8000d88 <fsm_manual_run+0x278>
				{
					greenDuration = 1000;
 8000d10:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <fsm_manual_run+0x2a0>)
 8000d12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d16:	601a      	str	r2, [r3, #0]
				}
			}

			break;
 8000d18:	e036      	b.n	8000d88 <fsm_manual_run+0x278>
		case ERROR:
			status = RED_GREEN;
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <fsm_manual_run+0x280>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]
			redDuration = tempRed;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <fsm_manual_run+0x290>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a1c      	ldr	r2, [pc, #112]	; (8000d98 <fsm_manual_run+0x288>)
 8000d26:	6013      	str	r3, [r2, #0]
			amberDuration = tempAmber;
 8000d28:	4b20      	ldr	r3, [pc, #128]	; (8000dac <fsm_manual_run+0x29c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a1e      	ldr	r2, [pc, #120]	; (8000da8 <fsm_manual_run+0x298>)
 8000d2e:	6013      	str	r3, [r2, #0]
			greenDuration = tempGreen;
 8000d30:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <fsm_manual_run+0x2a4>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a1e      	ldr	r2, [pc, #120]	; (8000db0 <fsm_manual_run+0x2a0>)
 8000d36:	6013      	str	r3, [r2, #0]
			redCounter = redDuration / 1000;
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <fsm_manual_run+0x288>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <fsm_manual_run+0x28c>)
 8000d3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d42:	1192      	asrs	r2, r2, #6
 8000d44:	17db      	asrs	r3, r3, #31
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	4a1b      	ldr	r2, [pc, #108]	; (8000db8 <fsm_manual_run+0x2a8>)
 8000d4a:	6013      	str	r3, [r2, #0]
			greenCounter = greenDuration / 1000;
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <fsm_manual_run+0x2a0>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <fsm_manual_run+0x28c>)
 8000d52:	fb82 1203 	smull	r1, r2, r2, r3
 8000d56:	1192      	asrs	r2, r2, #6
 8000d58:	17db      	asrs	r3, r3, #31
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <fsm_manual_run+0x2ac>)
 8000d5e:	6013      	str	r3, [r2, #0]
			amberCounter = amberDuration / 1000;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <fsm_manual_run+0x298>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <fsm_manual_run+0x28c>)
 8000d66:	fb82 1203 	smull	r1, r2, r2, r3
 8000d6a:	1192      	asrs	r2, r2, #6
 8000d6c:	17db      	asrs	r3, r3, #31
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <fsm_manual_run+0x2b0>)
 8000d72:	6013      	str	r3, [r2, #0]
			mode = 1;
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <fsm_manual_run+0x284>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	601a      	str	r2, [r3, #0]
			break;
 8000d7a:	e006      	b.n	8000d8a <fsm_manual_run+0x27a>
		default:
			break;
 8000d7c:	bf00      	nop
 8000d7e:	e004      	b.n	8000d8a <fsm_manual_run+0x27a>
			break;
 8000d80:	bf00      	nop
 8000d82:	e002      	b.n	8000d8a <fsm_manual_run+0x27a>
			break;
 8000d84:	bf00      	nop
 8000d86:	e000      	b.n	8000d8a <fsm_manual_run+0x27a>
			break;
 8000d88:	bf00      	nop
	}
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000034 	.word	0x20000034
 8000d94:	20000040 	.word	0x20000040
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	10624dd3 	.word	0x10624dd3
 8000da0:	200000b8 	.word	0x200000b8
 8000da4:	000182b8 	.word	0x000182b8
 8000da8:	20000008 	.word	0x20000008
 8000dac:	200000c4 	.word	0x200000c4
 8000db0:	20000004 	.word	0x20000004
 8000db4:	200000c8 	.word	0x200000c8
 8000db8:	200000c0 	.word	0x200000c0
 8000dbc:	200000bc 	.word	0x200000bc
 8000dc0:	200000b4 	.word	0x200000b4

08000dc4 <Init7SEG>:
#include "graphic.h"

int led_buffer[4] = {0, 0, 0, 0};

void Init7SEG()
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	480a      	ldr	r0, [pc, #40]	; (8000df8 <Init7SEG+0x34>)
 8000dce:	f001 f948 	bl	8002062 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2180      	movs	r1, #128	; 0x80
 8000dd6:	4808      	ldr	r0, [pc, #32]	; (8000df8 <Init7SEG+0x34>)
 8000dd8:	f001 f943 	bl	8002062 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <Init7SEG+0x34>)
 8000de4:	f001 f93d 	bl	8002062 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dee:	4802      	ldr	r0, [pc, #8]	; (8000df8 <Init7SEG+0x34>)
 8000df0:	f001 f937 	bl	8002062 <HAL_GPIO_WritePin>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40010800 	.word	0x40010800

08000dfc <display7SEG>:

void display7SEG(int num)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	if(num == 0)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d122      	bne.n	8000e50 <display7SEG+0x54>
	{
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	48bd      	ldr	r0, [pc, #756]	; (8001104 <display7SEG+0x308>)
 8000e10:	f001 f927 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2102      	movs	r1, #2
 8000e18:	48ba      	ldr	r0, [pc, #744]	; (8001104 <display7SEG+0x308>)
 8000e1a:	f001 f922 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2104      	movs	r1, #4
 8000e22:	48b8      	ldr	r0, [pc, #736]	; (8001104 <display7SEG+0x308>)
 8000e24:	f001 f91d 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2108      	movs	r1, #8
 8000e2c:	48b5      	ldr	r0, [pc, #724]	; (8001104 <display7SEG+0x308>)
 8000e2e:	f001 f918 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2110      	movs	r1, #16
 8000e36:	48b3      	ldr	r0, [pc, #716]	; (8001104 <display7SEG+0x308>)
 8000e38:	f001 f913 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2120      	movs	r1, #32
 8000e40:	48b0      	ldr	r0, [pc, #704]	; (8001104 <display7SEG+0x308>)
 8000e42:	f001 f90e 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, 1);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2140      	movs	r1, #64	; 0x40
 8000e4a:	48ae      	ldr	r0, [pc, #696]	; (8001104 <display7SEG+0x308>)
 8000e4c:	f001 f909 	bl	8002062 <HAL_GPIO_WritePin>
	}
	if(num == 1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d122      	bne.n	8000e9c <display7SEG+0xa0>
	{
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2101      	movs	r1, #1
 8000e5a:	48aa      	ldr	r0, [pc, #680]	; (8001104 <display7SEG+0x308>)
 8000e5c:	f001 f901 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2102      	movs	r1, #2
 8000e64:	48a7      	ldr	r0, [pc, #668]	; (8001104 <display7SEG+0x308>)
 8000e66:	f001 f8fc 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	48a5      	ldr	r0, [pc, #660]	; (8001104 <display7SEG+0x308>)
 8000e70:	f001 f8f7 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, 1);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2108      	movs	r1, #8
 8000e78:	48a2      	ldr	r0, [pc, #648]	; (8001104 <display7SEG+0x308>)
 8000e7a:	f001 f8f2 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, 1);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2110      	movs	r1, #16
 8000e82:	48a0      	ldr	r0, [pc, #640]	; (8001104 <display7SEG+0x308>)
 8000e84:	f001 f8ed 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, 1);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2120      	movs	r1, #32
 8000e8c:	489d      	ldr	r0, [pc, #628]	; (8001104 <display7SEG+0x308>)
 8000e8e:	f001 f8e8 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, 1);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2140      	movs	r1, #64	; 0x40
 8000e96:	489b      	ldr	r0, [pc, #620]	; (8001104 <display7SEG+0x308>)
 8000e98:	f001 f8e3 	bl	8002062 <HAL_GPIO_WritePin>
	}
	if(num == 2)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d122      	bne.n	8000ee8 <display7SEG+0xec>
	{
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4897      	ldr	r0, [pc, #604]	; (8001104 <display7SEG+0x308>)
 8000ea8:	f001 f8db 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4894      	ldr	r0, [pc, #592]	; (8001104 <display7SEG+0x308>)
 8000eb2:	f001 f8d6 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, 1);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2104      	movs	r1, #4
 8000eba:	4892      	ldr	r0, [pc, #584]	; (8001104 <display7SEG+0x308>)
 8000ebc:	f001 f8d1 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2108      	movs	r1, #8
 8000ec4:	488f      	ldr	r0, [pc, #572]	; (8001104 <display7SEG+0x308>)
 8000ec6:	f001 f8cc 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2110      	movs	r1, #16
 8000ece:	488d      	ldr	r0, [pc, #564]	; (8001104 <display7SEG+0x308>)
 8000ed0:	f001 f8c7 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, 1);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2120      	movs	r1, #32
 8000ed8:	488a      	ldr	r0, [pc, #552]	; (8001104 <display7SEG+0x308>)
 8000eda:	f001 f8c2 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2140      	movs	r1, #64	; 0x40
 8000ee2:	4888      	ldr	r0, [pc, #544]	; (8001104 <display7SEG+0x308>)
 8000ee4:	f001 f8bd 	bl	8002062 <HAL_GPIO_WritePin>
	}
	if(num == 3)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b03      	cmp	r3, #3
 8000eec:	d122      	bne.n	8000f34 <display7SEG+0x138>
	{
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, 0);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	4884      	ldr	r0, [pc, #528]	; (8001104 <display7SEG+0x308>)
 8000ef4:	f001 f8b5 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2102      	movs	r1, #2
 8000efc:	4881      	ldr	r0, [pc, #516]	; (8001104 <display7SEG+0x308>)
 8000efe:	f001 f8b0 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2104      	movs	r1, #4
 8000f06:	487f      	ldr	r0, [pc, #508]	; (8001104 <display7SEG+0x308>)
 8000f08:	f001 f8ab 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2108      	movs	r1, #8
 8000f10:	487c      	ldr	r0, [pc, #496]	; (8001104 <display7SEG+0x308>)
 8000f12:	f001 f8a6 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, 1);
 8000f16:	2201      	movs	r2, #1
 8000f18:	2110      	movs	r1, #16
 8000f1a:	487a      	ldr	r0, [pc, #488]	; (8001104 <display7SEG+0x308>)
 8000f1c:	f001 f8a1 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, 1);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2120      	movs	r1, #32
 8000f24:	4877      	ldr	r0, [pc, #476]	; (8001104 <display7SEG+0x308>)
 8000f26:	f001 f89c 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2140      	movs	r1, #64	; 0x40
 8000f2e:	4875      	ldr	r0, [pc, #468]	; (8001104 <display7SEG+0x308>)
 8000f30:	f001 f897 	bl	8002062 <HAL_GPIO_WritePin>
	}
	if(num == 4)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	d122      	bne.n	8000f80 <display7SEG+0x184>
	{
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, 1);
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4871      	ldr	r0, [pc, #452]	; (8001104 <display7SEG+0x308>)
 8000f40:	f001 f88f 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2102      	movs	r1, #2
 8000f48:	486e      	ldr	r0, [pc, #440]	; (8001104 <display7SEG+0x308>)
 8000f4a:	f001 f88a 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2104      	movs	r1, #4
 8000f52:	486c      	ldr	r0, [pc, #432]	; (8001104 <display7SEG+0x308>)
 8000f54:	f001 f885 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, 1);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2108      	movs	r1, #8
 8000f5c:	4869      	ldr	r0, [pc, #420]	; (8001104 <display7SEG+0x308>)
 8000f5e:	f001 f880 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, 1);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2110      	movs	r1, #16
 8000f66:	4867      	ldr	r0, [pc, #412]	; (8001104 <display7SEG+0x308>)
 8000f68:	f001 f87b 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, 0);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2120      	movs	r1, #32
 8000f70:	4864      	ldr	r0, [pc, #400]	; (8001104 <display7SEG+0x308>)
 8000f72:	f001 f876 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2140      	movs	r1, #64	; 0x40
 8000f7a:	4862      	ldr	r0, [pc, #392]	; (8001104 <display7SEG+0x308>)
 8000f7c:	f001 f871 	bl	8002062 <HAL_GPIO_WritePin>
	}
	if(num == 5)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b05      	cmp	r3, #5
 8000f84:	d122      	bne.n	8000fcc <display7SEG+0x1d0>
	{
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2101      	movs	r1, #1
 8000f8a:	485e      	ldr	r0, [pc, #376]	; (8001104 <display7SEG+0x308>)
 8000f8c:	f001 f869 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, 1);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2102      	movs	r1, #2
 8000f94:	485b      	ldr	r0, [pc, #364]	; (8001104 <display7SEG+0x308>)
 8000f96:	f001 f864 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	4859      	ldr	r0, [pc, #356]	; (8001104 <display7SEG+0x308>)
 8000fa0:	f001 f85f 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2108      	movs	r1, #8
 8000fa8:	4856      	ldr	r0, [pc, #344]	; (8001104 <display7SEG+0x308>)
 8000faa:	f001 f85a 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, 1);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2110      	movs	r1, #16
 8000fb2:	4854      	ldr	r0, [pc, #336]	; (8001104 <display7SEG+0x308>)
 8000fb4:	f001 f855 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2120      	movs	r1, #32
 8000fbc:	4851      	ldr	r0, [pc, #324]	; (8001104 <display7SEG+0x308>)
 8000fbe:	f001 f850 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2140      	movs	r1, #64	; 0x40
 8000fc6:	484f      	ldr	r0, [pc, #316]	; (8001104 <display7SEG+0x308>)
 8000fc8:	f001 f84b 	bl	8002062 <HAL_GPIO_WritePin>
	}
	if(num == 6)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d122      	bne.n	8001018 <display7SEG+0x21c>
	{
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	484b      	ldr	r0, [pc, #300]	; (8001104 <display7SEG+0x308>)
 8000fd8:	f001 f843 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, 1);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	2102      	movs	r1, #2
 8000fe0:	4848      	ldr	r0, [pc, #288]	; (8001104 <display7SEG+0x308>)
 8000fe2:	f001 f83e 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2104      	movs	r1, #4
 8000fea:	4846      	ldr	r0, [pc, #280]	; (8001104 <display7SEG+0x308>)
 8000fec:	f001 f839 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2108      	movs	r1, #8
 8000ff4:	4843      	ldr	r0, [pc, #268]	; (8001104 <display7SEG+0x308>)
 8000ff6:	f001 f834 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2110      	movs	r1, #16
 8000ffe:	4841      	ldr	r0, [pc, #260]	; (8001104 <display7SEG+0x308>)
 8001000:	f001 f82f 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2120      	movs	r1, #32
 8001008:	483e      	ldr	r0, [pc, #248]	; (8001104 <display7SEG+0x308>)
 800100a:	f001 f82a 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2140      	movs	r1, #64	; 0x40
 8001012:	483c      	ldr	r0, [pc, #240]	; (8001104 <display7SEG+0x308>)
 8001014:	f001 f825 	bl	8002062 <HAL_GPIO_WritePin>
	}
	if(num == 7)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b07      	cmp	r3, #7
 800101c:	d122      	bne.n	8001064 <display7SEG+0x268>
	{
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2101      	movs	r1, #1
 8001022:	4838      	ldr	r0, [pc, #224]	; (8001104 <display7SEG+0x308>)
 8001024:	f001 f81d 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2102      	movs	r1, #2
 800102c:	4835      	ldr	r0, [pc, #212]	; (8001104 <display7SEG+0x308>)
 800102e:	f001 f818 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2104      	movs	r1, #4
 8001036:	4833      	ldr	r0, [pc, #204]	; (8001104 <display7SEG+0x308>)
 8001038:	f001 f813 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, 1);
 800103c:	2201      	movs	r2, #1
 800103e:	2108      	movs	r1, #8
 8001040:	4830      	ldr	r0, [pc, #192]	; (8001104 <display7SEG+0x308>)
 8001042:	f001 f80e 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, 1);
 8001046:	2201      	movs	r2, #1
 8001048:	2110      	movs	r1, #16
 800104a:	482e      	ldr	r0, [pc, #184]	; (8001104 <display7SEG+0x308>)
 800104c:	f001 f809 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, 1);
 8001050:	2201      	movs	r2, #1
 8001052:	2120      	movs	r1, #32
 8001054:	482b      	ldr	r0, [pc, #172]	; (8001104 <display7SEG+0x308>)
 8001056:	f001 f804 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, 1);
 800105a:	2201      	movs	r2, #1
 800105c:	2140      	movs	r1, #64	; 0x40
 800105e:	4829      	ldr	r0, [pc, #164]	; (8001104 <display7SEG+0x308>)
 8001060:	f000 ffff 	bl	8002062 <HAL_GPIO_WritePin>
	}
	if(num == 8)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b08      	cmp	r3, #8
 8001068:	d122      	bne.n	80010b0 <display7SEG+0x2b4>
	{
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2101      	movs	r1, #1
 800106e:	4825      	ldr	r0, [pc, #148]	; (8001104 <display7SEG+0x308>)
 8001070:	f000 fff7 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2102      	movs	r1, #2
 8001078:	4822      	ldr	r0, [pc, #136]	; (8001104 <display7SEG+0x308>)
 800107a:	f000 fff2 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2104      	movs	r1, #4
 8001082:	4820      	ldr	r0, [pc, #128]	; (8001104 <display7SEG+0x308>)
 8001084:	f000 ffed 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2108      	movs	r1, #8
 800108c:	481d      	ldr	r0, [pc, #116]	; (8001104 <display7SEG+0x308>)
 800108e:	f000 ffe8 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2110      	movs	r1, #16
 8001096:	481b      	ldr	r0, [pc, #108]	; (8001104 <display7SEG+0x308>)
 8001098:	f000 ffe3 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2120      	movs	r1, #32
 80010a0:	4818      	ldr	r0, [pc, #96]	; (8001104 <display7SEG+0x308>)
 80010a2:	f000 ffde 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2140      	movs	r1, #64	; 0x40
 80010aa:	4816      	ldr	r0, [pc, #88]	; (8001104 <display7SEG+0x308>)
 80010ac:	f000 ffd9 	bl	8002062 <HAL_GPIO_WritePin>
	}
	if(num == 9)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b09      	cmp	r3, #9
 80010b4:	d122      	bne.n	80010fc <display7SEG+0x300>
	{
		HAL_GPIO_WritePin(SEGA_GPIO_Port, SEGA_Pin, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2101      	movs	r1, #1
 80010ba:	4812      	ldr	r0, [pc, #72]	; (8001104 <display7SEG+0x308>)
 80010bc:	f000 ffd1 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB_GPIO_Port, SEGB_Pin, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2102      	movs	r1, #2
 80010c4:	480f      	ldr	r0, [pc, #60]	; (8001104 <display7SEG+0x308>)
 80010c6:	f000 ffcc 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC_GPIO_Port, SEGC_Pin, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2104      	movs	r1, #4
 80010ce:	480d      	ldr	r0, [pc, #52]	; (8001104 <display7SEG+0x308>)
 80010d0:	f000 ffc7 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGD_GPIO_Port, SEGD_Pin, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2108      	movs	r1, #8
 80010d8:	480a      	ldr	r0, [pc, #40]	; (8001104 <display7SEG+0x308>)
 80010da:	f000 ffc2 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGE_GPIO_Port, SEGE_Pin, 1);
 80010de:	2201      	movs	r2, #1
 80010e0:	2110      	movs	r1, #16
 80010e2:	4808      	ldr	r0, [pc, #32]	; (8001104 <display7SEG+0x308>)
 80010e4:	f000 ffbd 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGF_GPIO_Port, SEGF_Pin, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2120      	movs	r1, #32
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <display7SEG+0x308>)
 80010ee:	f000 ffb8 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGG_GPIO_Port, SEGG_Pin, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2140      	movs	r1, #64	; 0x40
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <display7SEG+0x308>)
 80010f8:	f000 ffb3 	bl	8002062 <HAL_GPIO_WritePin>
	}
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40010c00 	.word	0x40010c00

08001108 <update7SEG>:


void update7SEG ( int index ){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d87a      	bhi.n	800120c <update7SEG+0x104>
 8001116:	a201      	add	r2, pc, #4	; (adr r2, 800111c <update7SEG+0x14>)
 8001118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111c:	0800112d 	.word	0x0800112d
 8001120:	08001165 	.word	0x08001165
 8001124:	0800119d 	.word	0x0800119d
 8001128:	080011d5 	.word	0x080011d5
	switch ( index ){
	case 0:
		// Display the first 7 SEG with led_buffer [0]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	2140      	movs	r1, #64	; 0x40
 8001130:	4839      	ldr	r0, [pc, #228]	; (8001218 <update7SEG+0x110>)
 8001132:	f000 ff96 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8001136:	2201      	movs	r2, #1
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	4837      	ldr	r0, [pc, #220]	; (8001218 <update7SEG+0x110>)
 800113c:	f000 ff91 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8001140:	2201      	movs	r2, #1
 8001142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001146:	4834      	ldr	r0, [pc, #208]	; (8001218 <update7SEG+0x110>)
 8001148:	f000 ff8b 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 800114c:	2201      	movs	r2, #1
 800114e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001152:	4831      	ldr	r0, [pc, #196]	; (8001218 <update7SEG+0x110>)
 8001154:	f000 ff85 	bl	8002062 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 8001158:	4b30      	ldr	r3, [pc, #192]	; (800121c <update7SEG+0x114>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fe4d 	bl	8000dfc <display7SEG>
		break ;
 8001162:	e054      	b.n	800120e <update7SEG+0x106>
	case 1:
		// Display the second 7 SEG with led_buffer [1]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 8001164:	2201      	movs	r2, #1
 8001166:	2140      	movs	r1, #64	; 0x40
 8001168:	482b      	ldr	r0, [pc, #172]	; (8001218 <update7SEG+0x110>)
 800116a:	f000 ff7a 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2180      	movs	r1, #128	; 0x80
 8001172:	4829      	ldr	r0, [pc, #164]	; (8001218 <update7SEG+0x110>)
 8001174:	f000 ff75 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8001178:	2201      	movs	r2, #1
 800117a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117e:	4826      	ldr	r0, [pc, #152]	; (8001218 <update7SEG+0x110>)
 8001180:	f000 ff6f 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8001184:	2201      	movs	r2, #1
 8001186:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118a:	4823      	ldr	r0, [pc, #140]	; (8001218 <update7SEG+0x110>)
 800118c:	f000 ff69 	bl	8002062 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <update7SEG+0x114>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fe31 	bl	8000dfc <display7SEG>
		break ;
 800119a:	e038      	b.n	800120e <update7SEG+0x106>
	case 2:
		// Display the third 7 SEG with led_buffer [2]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 800119c:	2201      	movs	r2, #1
 800119e:	2140      	movs	r1, #64	; 0x40
 80011a0:	481d      	ldr	r0, [pc, #116]	; (8001218 <update7SEG+0x110>)
 80011a2:	f000 ff5e 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 80011a6:	2201      	movs	r2, #1
 80011a8:	2180      	movs	r1, #128	; 0x80
 80011aa:	481b      	ldr	r0, [pc, #108]	; (8001218 <update7SEG+0x110>)
 80011ac:	f000 ff59 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b6:	4818      	ldr	r0, [pc, #96]	; (8001218 <update7SEG+0x110>)
 80011b8:	f000 ff53 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c2:	4815      	ldr	r0, [pc, #84]	; (8001218 <update7SEG+0x110>)
 80011c4:	f000 ff4d 	bl	8002062 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <update7SEG+0x114>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fe15 	bl	8000dfc <display7SEG>
		break ;
 80011d2:	e01c      	b.n	800120e <update7SEG+0x106>
	case 3:
		// Display the forth 7 SEG with led_buffer [3]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, 1);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2140      	movs	r1, #64	; 0x40
 80011d8:	480f      	ldr	r0, [pc, #60]	; (8001218 <update7SEG+0x110>)
 80011da:	f000 ff42 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 80011de:	2201      	movs	r2, #1
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	480d      	ldr	r0, [pc, #52]	; (8001218 <update7SEG+0x110>)
 80011e4:	f000 ff3d 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ee:	480a      	ldr	r0, [pc, #40]	; (8001218 <update7SEG+0x110>)
 80011f0:	f000 ff37 	bl	8002062 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011fa:	4807      	ldr	r0, [pc, #28]	; (8001218 <update7SEG+0x110>)
 80011fc:	f000 ff31 	bl	8002062 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <update7SEG+0x114>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fdf9 	bl	8000dfc <display7SEG>
		break ;
 800120a:	e000      	b.n	800120e <update7SEG+0x106>
	default :
		break ;
 800120c:	bf00      	nop
	}
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40010800 	.word	0x40010800
 800121c:	20000044 	.word	0x20000044

08001220 <updateLedBuffer>:

void updateLedBuffer(int value1, int value2)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	led_buffer[0] = value1 / 10;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a18      	ldr	r2, [pc, #96]	; (8001290 <updateLedBuffer+0x70>)
 800122e:	fb82 1203 	smull	r1, r2, r2, r3
 8001232:	1092      	asrs	r2, r2, #2
 8001234:	17db      	asrs	r3, r3, #31
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	4a16      	ldr	r2, [pc, #88]	; (8001294 <updateLedBuffer+0x74>)
 800123a:	6013      	str	r3, [r2, #0]
	led_buffer[1] = value1 % 10;
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <updateLedBuffer+0x70>)
 8001240:	fb83 2301 	smull	r2, r3, r3, r1
 8001244:	109a      	asrs	r2, r3, #2
 8001246:	17cb      	asrs	r3, r1, #31
 8001248:	1ad2      	subs	r2, r2, r3
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	1aca      	subs	r2, r1, r3
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <updateLedBuffer+0x74>)
 8001256:	605a      	str	r2, [r3, #4]
	led_buffer[2] = value2 / 10;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	4a0d      	ldr	r2, [pc, #52]	; (8001290 <updateLedBuffer+0x70>)
 800125c:	fb82 1203 	smull	r1, r2, r2, r3
 8001260:	1092      	asrs	r2, r2, #2
 8001262:	17db      	asrs	r3, r3, #31
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <updateLedBuffer+0x74>)
 8001268:	6093      	str	r3, [r2, #8]
	led_buffer[3] = value2 % 10;
 800126a:	6839      	ldr	r1, [r7, #0]
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <updateLedBuffer+0x70>)
 800126e:	fb83 2301 	smull	r2, r3, r3, r1
 8001272:	109a      	asrs	r2, r3, #2
 8001274:	17cb      	asrs	r3, r1, #31
 8001276:	1ad2      	subs	r2, r2, r3
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	1aca      	subs	r2, r1, r3
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <updateLedBuffer+0x74>)
 8001284:	60da      	str	r2, [r3, #12]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	66666667 	.word	0x66666667
 8001294:	20000044 	.word	0x20000044

08001298 <clearAllLed>:




void clearAllLed()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 800129c:	2201      	movs	r2, #1
 800129e:	2101      	movs	r1, #1
 80012a0:	480e      	ldr	r0, [pc, #56]	; (80012dc <clearAllLed+0x44>)
 80012a2:	f000 fede 	bl	8002062 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 80012a6:	2201      	movs	r2, #1
 80012a8:	2108      	movs	r1, #8
 80012aa:	480c      	ldr	r0, [pc, #48]	; (80012dc <clearAllLed+0x44>)
 80012ac:	f000 fed9 	bl	8002062 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_GPIO_Port, LED_AMBER_Pin, 1);
 80012b0:	2201      	movs	r2, #1
 80012b2:	2102      	movs	r1, #2
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <clearAllLed+0x44>)
 80012b6:	f000 fed4 	bl	8002062 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin, 1);
 80012ba:	2201      	movs	r2, #1
 80012bc:	2110      	movs	r1, #16
 80012be:	4807      	ldr	r0, [pc, #28]	; (80012dc <clearAllLed+0x44>)
 80012c0:	f000 fecf 	bl	8002062 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 80012c4:	2201      	movs	r2, #1
 80012c6:	2104      	movs	r1, #4
 80012c8:	4804      	ldr	r0, [pc, #16]	; (80012dc <clearAllLed+0x44>)
 80012ca:	f000 feca 	bl	8002062 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 80012ce:	2201      	movs	r2, #1
 80012d0:	2120      	movs	r1, #32
 80012d2:	4802      	ldr	r0, [pc, #8]	; (80012dc <clearAllLed+0x44>)
 80012d4:	f000 fec5 	bl	8002062 <HAL_GPIO_WritePin>
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40010800 	.word	0x40010800

080012e0 <turnOnLed>:


void turnOnLed(enum LED led)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
	switch (led)
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b05      	cmp	r3, #5
 80012ee:	d86f      	bhi.n	80013d0 <turnOnLed+0xf0>
 80012f0:	a201      	add	r2, pc, #4	; (adr r2, 80012f8 <turnOnLed+0x18>)
 80012f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f6:	bf00      	nop
 80012f8:	08001311 	.word	0x08001311
 80012fc:	08001331 	.word	0x08001331
 8001300:	08001351 	.word	0x08001351
 8001304:	08001371 	.word	0x08001371
 8001308:	08001391 	.word	0x08001391
 800130c:	080013b1 	.word	0x080013b1
	{
		case RED:
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2101      	movs	r1, #1
 8001314:	4831      	ldr	r0, [pc, #196]	; (80013dc <turnOnLed+0xfc>)
 8001316:	f000 fea4 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 800131a:	2201      	movs	r2, #1
 800131c:	2104      	movs	r1, #4
 800131e:	482f      	ldr	r0, [pc, #188]	; (80013dc <turnOnLed+0xfc>)
 8001320:	f000 fe9f 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER_GPIO_Port, LED_AMBER_Pin, 1);
 8001324:	2201      	movs	r2, #1
 8001326:	2102      	movs	r1, #2
 8001328:	482c      	ldr	r0, [pc, #176]	; (80013dc <turnOnLed+0xfc>)
 800132a:	f000 fe9a 	bl	8002062 <HAL_GPIO_WritePin>
			break;
 800132e:	e050      	b.n	80013d2 <turnOnLed+0xf2>
		case RED2:
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	2108      	movs	r1, #8
 8001334:	4829      	ldr	r0, [pc, #164]	; (80013dc <turnOnLed+0xfc>)
 8001336:	f000 fe94 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 800133a:	2201      	movs	r2, #1
 800133c:	2120      	movs	r1, #32
 800133e:	4827      	ldr	r0, [pc, #156]	; (80013dc <turnOnLed+0xfc>)
 8001340:	f000 fe8f 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin, 1);
 8001344:	2201      	movs	r2, #1
 8001346:	2110      	movs	r1, #16
 8001348:	4824      	ldr	r0, [pc, #144]	; (80013dc <turnOnLed+0xfc>)
 800134a:	f000 fe8a 	bl	8002062 <HAL_GPIO_WritePin>
			break;
 800134e:	e040      	b.n	80013d2 <turnOnLed+0xf2>
		case GREEN:
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8001350:	2201      	movs	r2, #1
 8001352:	2101      	movs	r1, #1
 8001354:	4821      	ldr	r0, [pc, #132]	; (80013dc <turnOnLed+0xfc>)
 8001356:	f000 fe84 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2104      	movs	r1, #4
 800135e:	481f      	ldr	r0, [pc, #124]	; (80013dc <turnOnLed+0xfc>)
 8001360:	f000 fe7f 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER_GPIO_Port, LED_AMBER_Pin, 1);
 8001364:	2201      	movs	r2, #1
 8001366:	2102      	movs	r1, #2
 8001368:	481c      	ldr	r0, [pc, #112]	; (80013dc <turnOnLed+0xfc>)
 800136a:	f000 fe7a 	bl	8002062 <HAL_GPIO_WritePin>
			break;
 800136e:	e030      	b.n	80013d2 <turnOnLed+0xf2>
		case GREEN2:
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 8001370:	2201      	movs	r2, #1
 8001372:	2108      	movs	r1, #8
 8001374:	4819      	ldr	r0, [pc, #100]	; (80013dc <turnOnLed+0xfc>)
 8001376:	f000 fe74 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2120      	movs	r1, #32
 800137e:	4817      	ldr	r0, [pc, #92]	; (80013dc <turnOnLed+0xfc>)
 8001380:	f000 fe6f 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin, 1);
 8001384:	2201      	movs	r2, #1
 8001386:	2110      	movs	r1, #16
 8001388:	4814      	ldr	r0, [pc, #80]	; (80013dc <turnOnLed+0xfc>)
 800138a:	f000 fe6a 	bl	8002062 <HAL_GPIO_WritePin>
			break;
 800138e:	e020      	b.n	80013d2 <turnOnLed+0xf2>
		case AMBER:
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8001390:	2201      	movs	r2, #1
 8001392:	2101      	movs	r1, #1
 8001394:	4811      	ldr	r0, [pc, #68]	; (80013dc <turnOnLed+0xfc>)
 8001396:	f000 fe64 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 800139a:	2201      	movs	r2, #1
 800139c:	2104      	movs	r1, #4
 800139e:	480f      	ldr	r0, [pc, #60]	; (80013dc <turnOnLed+0xfc>)
 80013a0:	f000 fe5f 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER_GPIO_Port, LED_AMBER_Pin, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2102      	movs	r1, #2
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <turnOnLed+0xfc>)
 80013aa:	f000 fe5a 	bl	8002062 <HAL_GPIO_WritePin>
			break;
 80013ae:	e010      	b.n	80013d2 <turnOnLed+0xf2>
		case AMBER2:
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 80013b0:	2201      	movs	r2, #1
 80013b2:	2108      	movs	r1, #8
 80013b4:	4809      	ldr	r0, [pc, #36]	; (80013dc <turnOnLed+0xfc>)
 80013b6:	f000 fe54 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 80013ba:	2201      	movs	r2, #1
 80013bc:	2120      	movs	r1, #32
 80013be:	4807      	ldr	r0, [pc, #28]	; (80013dc <turnOnLed+0xfc>)
 80013c0:	f000 fe4f 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2110      	movs	r1, #16
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <turnOnLed+0xfc>)
 80013ca:	f000 fe4a 	bl	8002062 <HAL_GPIO_WritePin>
			break;
 80013ce:	e000      	b.n	80013d2 <turnOnLed+0xf2>
		default:
			break;
 80013d0:	bf00      	nop
	}
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40010800 	.word	0x40010800

080013e0 <blinkingLed>:
void blinkingLed(enum LED led)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
	switch (led)
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d040      	beq.n	8001472 <blinkingLed+0x92>
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	dc5b      	bgt.n	80014ac <blinkingLed+0xcc>
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <blinkingLed+0x1e>
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d01d      	beq.n	8001438 <blinkingLed+0x58>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
			HAL_GPIO_TogglePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin);
			break;
		default:
			break;
 80013fc:	e056      	b.n	80014ac <blinkingLed+0xcc>
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80013fe:	2101      	movs	r1, #1
 8001400:	482d      	ldr	r0, [pc, #180]	; (80014b8 <blinkingLed+0xd8>)
 8001402:	f000 fe46 	bl	8002092 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 8001406:	2201      	movs	r2, #1
 8001408:	2104      	movs	r1, #4
 800140a:	482b      	ldr	r0, [pc, #172]	; (80014b8 <blinkingLed+0xd8>)
 800140c:	f000 fe29 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER_GPIO_Port, LED_AMBER_Pin, 1);
 8001410:	2201      	movs	r2, #1
 8001412:	2102      	movs	r1, #2
 8001414:	4828      	ldr	r0, [pc, #160]	; (80014b8 <blinkingLed+0xd8>)
 8001416:	f000 fe24 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 800141a:	2108      	movs	r1, #8
 800141c:	4826      	ldr	r0, [pc, #152]	; (80014b8 <blinkingLed+0xd8>)
 800141e:	f000 fe38 	bl	8002092 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 8001422:	2201      	movs	r2, #1
 8001424:	2120      	movs	r1, #32
 8001426:	4824      	ldr	r0, [pc, #144]	; (80014b8 <blinkingLed+0xd8>)
 8001428:	f000 fe1b 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin, 1);
 800142c:	2201      	movs	r2, #1
 800142e:	2110      	movs	r1, #16
 8001430:	4821      	ldr	r0, [pc, #132]	; (80014b8 <blinkingLed+0xd8>)
 8001432:	f000 fe16 	bl	8002062 <HAL_GPIO_WritePin>
			break;
 8001436:	e03a      	b.n	80014ae <blinkingLed+0xce>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8001438:	2201      	movs	r2, #1
 800143a:	2101      	movs	r1, #1
 800143c:	481e      	ldr	r0, [pc, #120]	; (80014b8 <blinkingLed+0xd8>)
 800143e:	f000 fe10 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001442:	2104      	movs	r1, #4
 8001444:	481c      	ldr	r0, [pc, #112]	; (80014b8 <blinkingLed+0xd8>)
 8001446:	f000 fe24 	bl	8002092 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED_AMBER_GPIO_Port, LED_AMBER_Pin, 1);
 800144a:	2201      	movs	r2, #1
 800144c:	2102      	movs	r1, #2
 800144e:	481a      	ldr	r0, [pc, #104]	; (80014b8 <blinkingLed+0xd8>)
 8001450:	f000 fe07 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 8001454:	2201      	movs	r2, #1
 8001456:	2108      	movs	r1, #8
 8001458:	4817      	ldr	r0, [pc, #92]	; (80014b8 <blinkingLed+0xd8>)
 800145a:	f000 fe02 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 800145e:	2120      	movs	r1, #32
 8001460:	4815      	ldr	r0, [pc, #84]	; (80014b8 <blinkingLed+0xd8>)
 8001462:	f000 fe16 	bl	8002092 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin, 1);
 8001466:	2201      	movs	r2, #1
 8001468:	2110      	movs	r1, #16
 800146a:	4813      	ldr	r0, [pc, #76]	; (80014b8 <blinkingLed+0xd8>)
 800146c:	f000 fdf9 	bl	8002062 <HAL_GPIO_WritePin>
			break;
 8001470:	e01d      	b.n	80014ae <blinkingLed+0xce>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED_Pin, 1);
 8001472:	2201      	movs	r2, #1
 8001474:	2101      	movs	r1, #1
 8001476:	4810      	ldr	r0, [pc, #64]	; (80014b8 <blinkingLed+0xd8>)
 8001478:	f000 fdf3 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, 1);
 800147c:	2201      	movs	r2, #1
 800147e:	2104      	movs	r1, #4
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <blinkingLed+0xd8>)
 8001482:	f000 fdee 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_AMBER_GPIO_Port, LED_AMBER_Pin);
 8001486:	2102      	movs	r1, #2
 8001488:	480b      	ldr	r0, [pc, #44]	; (80014b8 <blinkingLed+0xd8>)
 800148a:	f000 fe02 	bl	8002092 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 800148e:	2201      	movs	r2, #1
 8001490:	2108      	movs	r1, #8
 8001492:	4809      	ldr	r0, [pc, #36]	; (80014b8 <blinkingLed+0xd8>)
 8001494:	f000 fde5 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 8001498:	2201      	movs	r2, #1
 800149a:	2120      	movs	r1, #32
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <blinkingLed+0xd8>)
 800149e:	f000 fde0 	bl	8002062 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_AMBER2_GPIO_Port, LED_AMBER2_Pin);
 80014a2:	2110      	movs	r1, #16
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <blinkingLed+0xd8>)
 80014a6:	f000 fdf4 	bl	8002092 <HAL_GPIO_TogglePin>
			break;
 80014aa:	e000      	b.n	80014ae <blinkingLed+0xce>
			break;
 80014ac:	bf00      	nop
		}
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40010800 	.word	0x40010800

080014bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c2:	f000 facd 	bl	8001a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c6:	f000 f849 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80014ca:	f000 f883 	bl	80015d4 <MX_TIM2_Init>
  MX_GPIO_Init();
 80014ce:	f000 f901 	bl	80016d4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 80014d2:	481e      	ldr	r0, [pc, #120]	; (800154c <main+0x90>)
 80014d4:	f001 fa22 	bl	800291c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  initButton();
 80014d8:	f7ff f8bc 	bl	8000654 <initButton>
  Init7SEG();
 80014dc:	f7ff fc72 	bl	8000dc4 <Init7SEG>
  setTimer2(1000);
 80014e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e4:	f000 f992 	bl	800180c <setTimer2>
  setTimer1(1000);
 80014e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ec:	f000 f974 	bl	80017d8 <setTimer1>
  setTimer3(250);
 80014f0:	20fa      	movs	r0, #250	; 0xfa
 80014f2:	f000 f9a5 	bl	8001840 <setTimer3>
  int index_led = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
  fsm_automatic_run();
 80014fa:	f7ff f9e3 	bl	80008c4 <fsm_automatic_run>
  while (1)
  {
	  if (timer1_flag)
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <main+0x94>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <main+0x56>
	  {
		  setTimer1(1000);
 8001506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800150a:	f000 f965 	bl	80017d8 <setTimer1>
		  fsm_automatic_run();
 800150e:	f7ff f9d9 	bl	80008c4 <fsm_automatic_run>

	  }

	  if (timer2_flag)
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <main+0x98>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00d      	beq.n	8001536 <main+0x7a>
	  {
		  setTimer2(250);
 800151a:	20fa      	movs	r0, #250	; 0xfa
 800151c:	f000 f976 	bl	800180c <setTimer2>
		  update7SEG(index_led++);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fdee 	bl	8001108 <update7SEG>
		  if (index_led >= 4) index_led = 0;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b03      	cmp	r3, #3
 8001530:	dd01      	ble.n	8001536 <main+0x7a>
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
	  }
	  if(timer3_flag)
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <main+0x9c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0df      	beq.n	80014fe <main+0x42>
	  {
		  setTimer3(250);
 800153e:	20fa      	movs	r0, #250	; 0xfa
 8001540:	f000 f97e 	bl	8001840 <setTimer3>
		  fsm_manual_run();
 8001544:	f7ff fae4 	bl	8000b10 <fsm_manual_run>
	  if (timer1_flag)
 8001548:	e7d9      	b.n	80014fe <main+0x42>
 800154a:	bf00      	nop
 800154c:	200000d0 	.word	0x200000d0
 8001550:	20000054 	.word	0x20000054
 8001554:	2000005c 	.word	0x2000005c
 8001558:	20000064 	.word	0x20000064

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b090      	sub	sp, #64	; 0x40
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0318 	add.w	r3, r7, #24
 8001566:	2228      	movs	r2, #40	; 0x28
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f001 fd92 	bl	8003094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800157e:	2302      	movs	r3, #2
 8001580:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001582:	2301      	movs	r3, #1
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001586:	2310      	movs	r3, #16
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800158a:	2300      	movs	r3, #0
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800158e:	f107 0318 	add.w	r3, r7, #24
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fd96 	bl	80020c4 <HAL_RCC_OscConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800159e:	f000 f915 	bl	80017cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a2:	230f      	movs	r3, #15
 80015a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f001 f802 	bl	80025c4 <HAL_RCC_ClockConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015c6:	f000 f901 	bl	80017cc <Error_Handler>
  }
}
 80015ca:	bf00      	nop
 80015cc:	3740      	adds	r7, #64	; 0x40
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	463b      	mov	r3, r7
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015f0:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <MX_TIM2_Init+0xf0>)
 80015f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80015f8:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <MX_TIM2_Init+0xf0>)
 80015fa:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80015fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <MX_TIM2_Init+0xf0>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001606:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <MX_TIM2_Init+0xf0>)
 8001608:	2209      	movs	r2, #9
 800160a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160c:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <MX_TIM2_Init+0xf0>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001612:	4b2c      	ldr	r3, [pc, #176]	; (80016c4 <MX_TIM2_Init+0xf0>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001618:	482a      	ldr	r0, [pc, #168]	; (80016c4 <MX_TIM2_Init+0xf0>)
 800161a:	f001 f92f 	bl	800287c <HAL_TIM_Base_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001624:	f000 f8d2 	bl	80017cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	4619      	mov	r1, r3
 8001634:	4823      	ldr	r0, [pc, #140]	; (80016c4 <MX_TIM2_Init+0xf0>)
 8001636:	f001 fac5 	bl	8002bc4 <HAL_TIM_ConfigClockSource>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001640:	f000 f8c4 	bl	80017cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001644:	2300      	movs	r3, #0
 8001646:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800164c:	463b      	mov	r3, r7
 800164e:	4619      	mov	r1, r3
 8001650:	481c      	ldr	r0, [pc, #112]	; (80016c4 <MX_TIM2_Init+0xf0>)
 8001652:	f001 fc91 	bl	8002f78 <HAL_TIMEx_MasterConfigSynchronization>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800165c:	f000 f8b6 	bl	80017cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TICK = ((1 + (float)htim2.Init.Prescaler) * (1 + (float)htim2.Init.Period)) / 8000000 * 1000;
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <MX_TIM2_Init+0xf0>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe fe27 	bl	80002b8 <__aeabi_ui2f>
 800166a:	4603      	mov	r3, r0
 800166c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe fd71 	bl	8000158 <__addsf3>
 8001676:	4603      	mov	r3, r0
 8001678:	461c      	mov	r4, r3
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <MX_TIM2_Init+0xf0>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe fe1a 	bl	80002b8 <__aeabi_ui2f>
 8001684:	4603      	mov	r3, r0
 8001686:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe fd64 	bl	8000158 <__addsf3>
 8001690:	4603      	mov	r3, r0
 8001692:	4619      	mov	r1, r3
 8001694:	4620      	mov	r0, r4
 8001696:	f7fe fe67 	bl	8000368 <__aeabi_fmul>
 800169a:	4603      	mov	r3, r0
 800169c:	490a      	ldr	r1, [pc, #40]	; (80016c8 <MX_TIM2_Init+0xf4>)
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff16 	bl	80004d0 <__aeabi_fdiv>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4909      	ldr	r1, [pc, #36]	; (80016cc <MX_TIM2_Init+0xf8>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe fe5d 	bl	8000368 <__aeabi_fmul>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ffa9 	bl	8000608 <__aeabi_f2iz>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <MX_TIM2_Init+0xfc>)
 80016ba:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	371c      	adds	r7, #28
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}
 80016c4:	200000d0 	.word	0x200000d0
 80016c8:	4af42400 	.word	0x4af42400
 80016cc:	447a0000 	.word	0x447a0000
 80016d0:	200000cc 	.word	0x200000cc

080016d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016da:	f107 0310 	add.w	r3, r7, #16
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e8:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <MX_GPIO_Init+0xd0>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a2d      	ldr	r2, [pc, #180]	; (80017a4 <MX_GPIO_Init+0xd0>)
 80016ee:	f043 0310 	orr.w	r3, r3, #16
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <MX_GPIO_Init+0xd0>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001700:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <MX_GPIO_Init+0xd0>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	4a27      	ldr	r2, [pc, #156]	; (80017a4 <MX_GPIO_Init+0xd0>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	6193      	str	r3, [r2, #24]
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <MX_GPIO_Init+0xd0>)
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <MX_GPIO_Init+0xd0>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <MX_GPIO_Init+0xd0>)
 800171e:	f043 0308 	orr.w	r3, r3, #8
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <MX_GPIO_Init+0xd0>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_AMBER_Pin|LED_GREEN_Pin|LED_RED2_Pin
 8001730:	2200      	movs	r2, #0
 8001732:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001736:	481c      	ldr	r0, [pc, #112]	; (80017a8 <MX_GPIO_Init+0xd4>)
 8001738:	f000 fc93 	bl	8002062 <HAL_GPIO_WritePin>
                          |LED_AMBER2_Pin|LED_GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEGA_Pin|SEGB_Pin|SEGC_Pin|SEGD_Pin
 800173c:	2200      	movs	r2, #0
 800173e:	217f      	movs	r1, #127	; 0x7f
 8001740:	481a      	ldr	r0, [pc, #104]	; (80017ac <MX_GPIO_Init+0xd8>)
 8001742:	f000 fc8e 	bl	8002062 <HAL_GPIO_WritePin>
                          |SEGE_Pin|SEGF_Pin|SEGG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001746:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800174a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001750:	2301      	movs	r3, #1
 8001752:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	4619      	mov	r1, r3
 800175a:	4815      	ldr	r0, [pc, #84]	; (80017b0 <MX_GPIO_Init+0xdc>)
 800175c:	f000 faf0 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_AMBER_Pin LED_GREEN_Pin LED_RED2_Pin
                           LED_AMBER2_Pin LED_GREEN2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_AMBER_Pin|LED_GREEN_Pin|LED_RED2_Pin
 8001760:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001764:	613b      	str	r3, [r7, #16]
                          |LED_AMBER2_Pin|LED_GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001766:	2301      	movs	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2302      	movs	r3, #2
 8001770:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0310 	add.w	r3, r7, #16
 8001776:	4619      	mov	r1, r3
 8001778:	480b      	ldr	r0, [pc, #44]	; (80017a8 <MX_GPIO_Init+0xd4>)
 800177a:	f000 fae1 	bl	8001d40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEGA_Pin SEGB_Pin SEGC_Pin SEGD_Pin
                           SEGE_Pin SEGF_Pin SEGG_Pin */
  GPIO_InitStruct.Pin = SEGA_Pin|SEGB_Pin|SEGC_Pin|SEGD_Pin
 800177e:	237f      	movs	r3, #127	; 0x7f
 8001780:	613b      	str	r3, [r7, #16]
                          |SEGE_Pin|SEGF_Pin|SEGG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001782:	2301      	movs	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2302      	movs	r3, #2
 800178c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 0310 	add.w	r3, r7, #16
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_GPIO_Init+0xd8>)
 8001796:	f000 fad3 	bl	8001d40 <HAL_GPIO_Init>

}
 800179a:	bf00      	nop
 800179c:	3720      	adds	r7, #32
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40010800 	.word	0x40010800
 80017ac:	40010c00 	.word	0x40010c00
 80017b0:	40011000 	.word	0x40011000

080017b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
	void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
	{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

		getKeyInput();
 80017bc:	f7fe ffb0 	bl	8000720 <getKeyInput>
		timerRun();
 80017c0:	f000 f858 	bl	8001874 <timerRun>
	}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d0:	b672      	cpsid	i
}
 80017d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <Error_Handler+0x8>
	...

080017d8 <setTimer1>:

int timer3_flag = 0;
int counter3 = 0;

void setTimer1(int duration)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	counter1 = duration / TICK;
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <setTimer1+0x28>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80017ea:	4a06      	ldr	r2, [pc, #24]	; (8001804 <setTimer1+0x2c>)
 80017ec:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <setTimer1+0x30>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	200000cc 	.word	0x200000cc
 8001804:	20000058 	.word	0x20000058
 8001808:	20000054 	.word	0x20000054

0800180c <setTimer2>:

void setTimer2(int duration)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	counter2 = duration / TICK;
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <setTimer2+0x28>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	fb92 f3f3 	sdiv	r3, r2, r3
 800181e:	4a06      	ldr	r2, [pc, #24]	; (8001838 <setTimer2+0x2c>)
 8001820:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <setTimer2+0x30>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	200000cc 	.word	0x200000cc
 8001838:	20000060 	.word	0x20000060
 800183c:	2000005c 	.word	0x2000005c

08001840 <setTimer3>:

void setTimer3(int duration)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	counter3 = duration / TICK;
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <setTimer3+0x28>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001852:	4a06      	ldr	r2, [pc, #24]	; (800186c <setTimer3+0x2c>)
 8001854:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <setTimer3+0x30>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	200000cc 	.word	0x200000cc
 800186c:	20000068 	.word	0x20000068
 8001870:	20000064 	.word	0x20000064

08001874 <timerRun>:


void timerRun()
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
	if (counter1 >= 0)
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <timerRun+0x6c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	db0b      	blt.n	8001898 <timerRun+0x24>
	{
		counter1--;
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <timerRun+0x6c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	3b01      	subs	r3, #1
 8001886:	4a16      	ldr	r2, [pc, #88]	; (80018e0 <timerRun+0x6c>)
 8001888:	6013      	str	r3, [r2, #0]
		if(counter1 <= 0)
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <timerRun+0x6c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	dc02      	bgt.n	8001898 <timerRun+0x24>
		{
			timer1_flag = 1;
 8001892:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <timerRun+0x70>)
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]
		}
	}

	if (counter2 >= 0)
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <timerRun+0x74>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0b      	blt.n	80018b8 <timerRun+0x44>
	{
		counter2--;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <timerRun+0x74>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	4a10      	ldr	r2, [pc, #64]	; (80018e8 <timerRun+0x74>)
 80018a8:	6013      	str	r3, [r2, #0]
		if (counter2 <= 0)
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <timerRun+0x74>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	dc02      	bgt.n	80018b8 <timerRun+0x44>
		{
			timer2_flag = 1;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <timerRun+0x78>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
		}
	}
	if (counter3 >= 0)
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <timerRun+0x7c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	db0b      	blt.n	80018d8 <timerRun+0x64>
	{
		counter3--;
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <timerRun+0x7c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <timerRun+0x7c>)
 80018c8:	6013      	str	r3, [r2, #0]
		if (counter3 <= 0)
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <timerRun+0x7c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	dc02      	bgt.n	80018d8 <timerRun+0x64>
		{
			timer3_flag = 1;
 80018d2:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <timerRun+0x80>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr
 80018e0:	20000058 	.word	0x20000058
 80018e4:	20000054 	.word	0x20000054
 80018e8:	20000060 	.word	0x20000060
 80018ec:	2000005c 	.word	0x2000005c
 80018f0:	20000068 	.word	0x20000068
 80018f4:	20000064 	.word	0x20000064

080018f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_MspInit+0x5c>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	4a14      	ldr	r2, [pc, #80]	; (8001954 <HAL_MspInit+0x5c>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6193      	str	r3, [r2, #24]
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_MspInit+0x5c>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <HAL_MspInit+0x5c>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <HAL_MspInit+0x5c>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001920:	61d3      	str	r3, [r2, #28]
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <HAL_MspInit+0x5c>)
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800192e:	4b0a      	ldr	r3, [pc, #40]	; (8001958 <HAL_MspInit+0x60>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <HAL_MspInit+0x60>)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	40021000 	.word	0x40021000
 8001958:	40010000 	.word	0x40010000

0800195c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800196c:	d113      	bne.n	8001996 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_TIM_Base_MspInit+0x44>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <HAL_TIM_Base_MspInit+0x44>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	61d3      	str	r3, [r2, #28]
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_TIM_Base_MspInit+0x44>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2100      	movs	r1, #0
 800198a:	201c      	movs	r0, #28
 800198c:	f000 f9a1 	bl	8001cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001990:	201c      	movs	r0, #28
 8001992:	f000 f9ba 	bl	8001d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000

080019a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <NMI_Handler+0x4>

080019aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ae:	e7fe      	b.n	80019ae <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <MemManage_Handler+0x4>

080019b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <BusFault_Handler+0x4>

080019bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <UsageFault_Handler+0x4>

080019c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr

080019e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ea:	f000 f87f 	bl	8001aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <TIM2_IRQHandler+0x10>)
 80019fa:	f000 ffdb 	bl	80029b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200000d0 	.word	0x200000d0

08001a08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a14:	f7ff fff8 	bl	8001a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a18:	480b      	ldr	r0, [pc, #44]	; (8001a48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a1a:	490c      	ldr	r1, [pc, #48]	; (8001a4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a1c:	4a0c      	ldr	r2, [pc, #48]	; (8001a50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a20:	e002      	b.n	8001a28 <LoopCopyDataInit>

08001a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a26:	3304      	adds	r3, #4

08001a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a2c:	d3f9      	bcc.n	8001a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2e:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a30:	4c09      	ldr	r4, [pc, #36]	; (8001a58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a34:	e001      	b.n	8001a3a <LoopFillZerobss>

08001a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a38:	3204      	adds	r2, #4

08001a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a3c:	d3fb      	bcc.n	8001a36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f001 fb05 	bl	800304c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a42:	f7ff fd3b 	bl	80014bc <main>
  bx lr
 8001a46:	4770      	bx	lr
  ldr r0, =_sdata
 8001a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a4c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001a50:	080030e8 	.word	0x080030e8
  ldr r2, =_sbss
 8001a54:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001a58:	2000011c 	.word	0x2000011c

08001a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a5c:	e7fe      	b.n	8001a5c <ADC1_2_IRQHandler>
	...

08001a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_Init+0x28>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a07      	ldr	r2, [pc, #28]	; (8001a88 <HAL_Init+0x28>)
 8001a6a:	f043 0310 	orr.w	r3, r3, #16
 8001a6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a70:	2003      	movs	r0, #3
 8001a72:	f000 f923 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a76:	200f      	movs	r0, #15
 8001a78:	f000 f808 	bl	8001a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a7c:	f7ff ff3c 	bl	80018f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40022000 	.word	0x40022000

08001a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_InitTick+0x54>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_InitTick+0x58>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f93b 	bl	8001d26 <HAL_SYSTICK_Config>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e00e      	b.n	8001ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b0f      	cmp	r3, #15
 8001abe:	d80a      	bhi.n	8001ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac8:	f000 f903 	bl	8001cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001acc:	4a06      	ldr	r2, [pc, #24]	; (8001ae8 <HAL_InitTick+0x5c>)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e000      	b.n	8001ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	2000000c 	.word	0x2000000c
 8001ae4:	20000014 	.word	0x20000014
 8001ae8:	20000010 	.word	0x20000010

08001aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_IncTick+0x1c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_IncTick+0x20>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a03      	ldr	r2, [pc, #12]	; (8001b0c <HAL_IncTick+0x20>)
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	20000014 	.word	0x20000014
 8001b0c:	20000118 	.word	0x20000118

08001b10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b02      	ldr	r3, [pc, #8]	; (8001b20 <HAL_GetTick+0x10>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	20000118 	.word	0x20000118

08001b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b40:	4013      	ands	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b56:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	60d3      	str	r3, [r2, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <__NVIC_GetPriorityGrouping+0x18>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	f003 0307 	and.w	r3, r3, #7
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	db0b      	blt.n	8001bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4906      	ldr	r1, [pc, #24]	; (8001bbc <__NVIC_EnableIRQ+0x34>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	2001      	movs	r0, #1
 8001baa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	e000e100 	.word	0xe000e100

08001bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	db0a      	blt.n	8001bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	490c      	ldr	r1, [pc, #48]	; (8001c0c <__NVIC_SetPriority+0x4c>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	440b      	add	r3, r1
 8001be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be8:	e00a      	b.n	8001c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4908      	ldr	r1, [pc, #32]	; (8001c10 <__NVIC_SetPriority+0x50>)
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	3b04      	subs	r3, #4
 8001bf8:	0112      	lsls	r2, r2, #4
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	761a      	strb	r2, [r3, #24]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000e100 	.word	0xe000e100
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f1c3 0307 	rsb	r3, r3, #7
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	bf28      	it	cs
 8001c32:	2304      	movcs	r3, #4
 8001c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d902      	bls.n	8001c44 <NVIC_EncodePriority+0x30>
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3b03      	subs	r3, #3
 8001c42:	e000      	b.n	8001c46 <NVIC_EncodePriority+0x32>
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43da      	mvns	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	401a      	ands	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	43d9      	mvns	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	4313      	orrs	r3, r2
         );
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	; 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c88:	d301      	bcc.n	8001c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00f      	b.n	8001cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <SysTick_Config+0x40>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c96:	210f      	movs	r1, #15
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f7ff ff90 	bl	8001bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <SysTick_Config+0x40>)
 8001ca8:	2207      	movs	r2, #7
 8001caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff2d 	bl	8001b24 <__NVIC_SetPriorityGrouping>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce4:	f7ff ff42 	bl	8001b6c <__NVIC_GetPriorityGrouping>
 8001ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	6978      	ldr	r0, [r7, #20]
 8001cf0:	f7ff ff90 	bl	8001c14 <NVIC_EncodePriority>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff5f 	bl	8001bc0 <__NVIC_SetPriority>
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4603      	mov	r3, r0
 8001d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff ff35 	bl	8001b88 <__NVIC_EnableIRQ>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ffa2 	bl	8001c78 <SysTick_Config>
 8001d34:	4603      	mov	r3, r0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b08b      	sub	sp, #44	; 0x2c
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d52:	e148      	b.n	8001fe6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d54:	2201      	movs	r2, #1
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	f040 8137 	bne.w	8001fe0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	4aa3      	ldr	r2, [pc, #652]	; (8002004 <HAL_GPIO_Init+0x2c4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d05e      	beq.n	8001e3a <HAL_GPIO_Init+0xfa>
 8001d7c:	4aa1      	ldr	r2, [pc, #644]	; (8002004 <HAL_GPIO_Init+0x2c4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d875      	bhi.n	8001e6e <HAL_GPIO_Init+0x12e>
 8001d82:	4aa1      	ldr	r2, [pc, #644]	; (8002008 <HAL_GPIO_Init+0x2c8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d058      	beq.n	8001e3a <HAL_GPIO_Init+0xfa>
 8001d88:	4a9f      	ldr	r2, [pc, #636]	; (8002008 <HAL_GPIO_Init+0x2c8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d86f      	bhi.n	8001e6e <HAL_GPIO_Init+0x12e>
 8001d8e:	4a9f      	ldr	r2, [pc, #636]	; (800200c <HAL_GPIO_Init+0x2cc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d052      	beq.n	8001e3a <HAL_GPIO_Init+0xfa>
 8001d94:	4a9d      	ldr	r2, [pc, #628]	; (800200c <HAL_GPIO_Init+0x2cc>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d869      	bhi.n	8001e6e <HAL_GPIO_Init+0x12e>
 8001d9a:	4a9d      	ldr	r2, [pc, #628]	; (8002010 <HAL_GPIO_Init+0x2d0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d04c      	beq.n	8001e3a <HAL_GPIO_Init+0xfa>
 8001da0:	4a9b      	ldr	r2, [pc, #620]	; (8002010 <HAL_GPIO_Init+0x2d0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d863      	bhi.n	8001e6e <HAL_GPIO_Init+0x12e>
 8001da6:	4a9b      	ldr	r2, [pc, #620]	; (8002014 <HAL_GPIO_Init+0x2d4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d046      	beq.n	8001e3a <HAL_GPIO_Init+0xfa>
 8001dac:	4a99      	ldr	r2, [pc, #612]	; (8002014 <HAL_GPIO_Init+0x2d4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d85d      	bhi.n	8001e6e <HAL_GPIO_Init+0x12e>
 8001db2:	2b12      	cmp	r3, #18
 8001db4:	d82a      	bhi.n	8001e0c <HAL_GPIO_Init+0xcc>
 8001db6:	2b12      	cmp	r3, #18
 8001db8:	d859      	bhi.n	8001e6e <HAL_GPIO_Init+0x12e>
 8001dba:	a201      	add	r2, pc, #4	; (adr r2, 8001dc0 <HAL_GPIO_Init+0x80>)
 8001dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc0:	08001e3b 	.word	0x08001e3b
 8001dc4:	08001e15 	.word	0x08001e15
 8001dc8:	08001e27 	.word	0x08001e27
 8001dcc:	08001e69 	.word	0x08001e69
 8001dd0:	08001e6f 	.word	0x08001e6f
 8001dd4:	08001e6f 	.word	0x08001e6f
 8001dd8:	08001e6f 	.word	0x08001e6f
 8001ddc:	08001e6f 	.word	0x08001e6f
 8001de0:	08001e6f 	.word	0x08001e6f
 8001de4:	08001e6f 	.word	0x08001e6f
 8001de8:	08001e6f 	.word	0x08001e6f
 8001dec:	08001e6f 	.word	0x08001e6f
 8001df0:	08001e6f 	.word	0x08001e6f
 8001df4:	08001e6f 	.word	0x08001e6f
 8001df8:	08001e6f 	.word	0x08001e6f
 8001dfc:	08001e6f 	.word	0x08001e6f
 8001e00:	08001e6f 	.word	0x08001e6f
 8001e04:	08001e1d 	.word	0x08001e1d
 8001e08:	08001e31 	.word	0x08001e31
 8001e0c:	4a82      	ldr	r2, [pc, #520]	; (8002018 <HAL_GPIO_Init+0x2d8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e12:	e02c      	b.n	8001e6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	623b      	str	r3, [r7, #32]
          break;
 8001e1a:	e029      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	3304      	adds	r3, #4
 8001e22:	623b      	str	r3, [r7, #32]
          break;
 8001e24:	e024      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	3308      	adds	r3, #8
 8001e2c:	623b      	str	r3, [r7, #32]
          break;
 8001e2e:	e01f      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	330c      	adds	r3, #12
 8001e36:	623b      	str	r3, [r7, #32]
          break;
 8001e38:	e01a      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d102      	bne.n	8001e48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e42:	2304      	movs	r3, #4
 8001e44:	623b      	str	r3, [r7, #32]
          break;
 8001e46:	e013      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d105      	bne.n	8001e5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e50:	2308      	movs	r3, #8
 8001e52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	611a      	str	r2, [r3, #16]
          break;
 8001e5a:	e009      	b.n	8001e70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e5c:	2308      	movs	r3, #8
 8001e5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	615a      	str	r2, [r3, #20]
          break;
 8001e66:	e003      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
          break;
 8001e6c:	e000      	b.n	8001e70 <HAL_GPIO_Init+0x130>
          break;
 8001e6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2bff      	cmp	r3, #255	; 0xff
 8001e74:	d801      	bhi.n	8001e7a <HAL_GPIO_Init+0x13a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	e001      	b.n	8001e7e <HAL_GPIO_Init+0x13e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	2bff      	cmp	r3, #255	; 0xff
 8001e84:	d802      	bhi.n	8001e8c <HAL_GPIO_Init+0x14c>
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	e002      	b.n	8001e92 <HAL_GPIO_Init+0x152>
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	3b08      	subs	r3, #8
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	210f      	movs	r1, #15
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	6a39      	ldr	r1, [r7, #32]
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eac:	431a      	orrs	r2, r3
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8090 	beq.w	8001fe0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ec0:	4b56      	ldr	r3, [pc, #344]	; (800201c <HAL_GPIO_Init+0x2dc>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a55      	ldr	r2, [pc, #340]	; (800201c <HAL_GPIO_Init+0x2dc>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b53      	ldr	r3, [pc, #332]	; (800201c <HAL_GPIO_Init+0x2dc>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ed8:	4a51      	ldr	r2, [pc, #324]	; (8002020 <HAL_GPIO_Init+0x2e0>)
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	3302      	adds	r3, #2
 8001ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	220f      	movs	r2, #15
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a49      	ldr	r2, [pc, #292]	; (8002024 <HAL_GPIO_Init+0x2e4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00d      	beq.n	8001f20 <HAL_GPIO_Init+0x1e0>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a48      	ldr	r2, [pc, #288]	; (8002028 <HAL_GPIO_Init+0x2e8>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d007      	beq.n	8001f1c <HAL_GPIO_Init+0x1dc>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a47      	ldr	r2, [pc, #284]	; (800202c <HAL_GPIO_Init+0x2ec>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d101      	bne.n	8001f18 <HAL_GPIO_Init+0x1d8>
 8001f14:	2302      	movs	r3, #2
 8001f16:	e004      	b.n	8001f22 <HAL_GPIO_Init+0x1e2>
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e002      	b.n	8001f22 <HAL_GPIO_Init+0x1e2>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <HAL_GPIO_Init+0x1e2>
 8001f20:	2300      	movs	r3, #0
 8001f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f24:	f002 0203 	and.w	r2, r2, #3
 8001f28:	0092      	lsls	r2, r2, #2
 8001f2a:	4093      	lsls	r3, r2
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f32:	493b      	ldr	r1, [pc, #236]	; (8002020 <HAL_GPIO_Init+0x2e0>)
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	3302      	adds	r3, #2
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f4c:	4b38      	ldr	r3, [pc, #224]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	4937      	ldr	r1, [pc, #220]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f5a:	4b35      	ldr	r3, [pc, #212]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	4933      	ldr	r1, [pc, #204]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f74:	4b2e      	ldr	r3, [pc, #184]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	492d      	ldr	r1, [pc, #180]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60cb      	str	r3, [r1, #12]
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f82:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	4929      	ldr	r1, [pc, #164]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f9c:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	4923      	ldr	r1, [pc, #140]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001faa:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	491f      	ldr	r1, [pc, #124]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4919      	ldr	r1, [pc, #100]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
 8001fd0:	e006      	b.n	8001fe0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	4915      	ldr	r1, [pc, #84]	; (8002030 <HAL_GPIO_Init+0x2f0>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f47f aeaf 	bne.w	8001d54 <HAL_GPIO_Init+0x14>
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	bf00      	nop
 8001ffa:	372c      	adds	r7, #44	; 0x2c
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	10320000 	.word	0x10320000
 8002008:	10310000 	.word	0x10310000
 800200c:	10220000 	.word	0x10220000
 8002010:	10210000 	.word	0x10210000
 8002014:	10120000 	.word	0x10120000
 8002018:	10110000 	.word	0x10110000
 800201c:	40021000 	.word	0x40021000
 8002020:	40010000 	.word	0x40010000
 8002024:	40010800 	.word	0x40010800
 8002028:	40010c00 	.word	0x40010c00
 800202c:	40011000 	.word	0x40011000
 8002030:	40010400 	.word	0x40010400

08002034 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800204c:	2301      	movs	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	e001      	b.n	8002056 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002056:	7bfb      	ldrb	r3, [r7, #15]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr

08002062 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	807b      	strh	r3, [r7, #2]
 800206e:	4613      	mov	r3, r2
 8002070:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002072:	787b      	ldrb	r3, [r7, #1]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002078:	887a      	ldrh	r2, [r7, #2]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800207e:	e003      	b.n	8002088 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	041a      	lsls	r2, r3, #16
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	611a      	str	r2, [r3, #16]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr

08002092 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002092:	b480      	push	{r7}
 8002094:	b085      	sub	sp, #20
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
 800209a:	460b      	mov	r3, r1
 800209c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020a4:	887a      	ldrh	r2, [r7, #2]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4013      	ands	r3, r2
 80020aa:	041a      	lsls	r2, r3, #16
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	43d9      	mvns	r1, r3
 80020b0:	887b      	ldrh	r3, [r7, #2]
 80020b2:	400b      	ands	r3, r1
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	611a      	str	r2, [r3, #16]
}
 80020ba:	bf00      	nop
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e26c      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 8087 	beq.w	80021f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020e4:	4b92      	ldr	r3, [pc, #584]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 030c 	and.w	r3, r3, #12
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d00c      	beq.n	800210a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020f0:	4b8f      	ldr	r3, [pc, #572]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 030c 	and.w	r3, r3, #12
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d112      	bne.n	8002122 <HAL_RCC_OscConfig+0x5e>
 80020fc:	4b8c      	ldr	r3, [pc, #560]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002108:	d10b      	bne.n	8002122 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210a:	4b89      	ldr	r3, [pc, #548]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d06c      	beq.n	80021f0 <HAL_RCC_OscConfig+0x12c>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d168      	bne.n	80021f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e246      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212a:	d106      	bne.n	800213a <HAL_RCC_OscConfig+0x76>
 800212c:	4b80      	ldr	r3, [pc, #512]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a7f      	ldr	r2, [pc, #508]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	e02e      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x98>
 8002142:	4b7b      	ldr	r3, [pc, #492]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a7a      	ldr	r2, [pc, #488]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b78      	ldr	r3, [pc, #480]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a77      	ldr	r2, [pc, #476]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002154:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e01d      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0xbc>
 8002166:	4b72      	ldr	r3, [pc, #456]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a71      	ldr	r2, [pc, #452]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 800216c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	4b6f      	ldr	r3, [pc, #444]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a6e      	ldr	r2, [pc, #440]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e00b      	b.n	8002198 <HAL_RCC_OscConfig+0xd4>
 8002180:	4b6b      	ldr	r3, [pc, #428]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a6a      	ldr	r2, [pc, #424]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	4b68      	ldr	r3, [pc, #416]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a67      	ldr	r2, [pc, #412]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002196:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d013      	beq.n	80021c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7ff fcb6 	bl	8001b10 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a8:	f7ff fcb2 	bl	8001b10 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	; 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e1fa      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	4b5d      	ldr	r3, [pc, #372]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0xe4>
 80021c6:	e014      	b.n	80021f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7ff fca2 	bl	8001b10 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d0:	f7ff fc9e 	bl	8001b10 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e1e6      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e2:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x10c>
 80021ee:	e000      	b.n	80021f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d063      	beq.n	80022c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021fe:	4b4c      	ldr	r3, [pc, #304]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800220a:	4b49      	ldr	r3, [pc, #292]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b08      	cmp	r3, #8
 8002214:	d11c      	bne.n	8002250 <HAL_RCC_OscConfig+0x18c>
 8002216:	4b46      	ldr	r3, [pc, #280]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d116      	bne.n	8002250 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002222:	4b43      	ldr	r3, [pc, #268]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_RCC_OscConfig+0x176>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e1ba      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223a:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4939      	ldr	r1, [pc, #228]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	e03a      	b.n	80022c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d020      	beq.n	800229a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002258:	4b36      	ldr	r3, [pc, #216]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7ff fc57 	bl	8001b10 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002266:	f7ff fc53 	bl	8001b10 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e19b      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002278:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002284:	4b2a      	ldr	r3, [pc, #168]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4927      	ldr	r1, [pc, #156]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 8002294:	4313      	orrs	r3, r2
 8002296:	600b      	str	r3, [r1, #0]
 8002298:	e015      	b.n	80022c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229a:	4b26      	ldr	r3, [pc, #152]	; (8002334 <HAL_RCC_OscConfig+0x270>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7ff fc36 	bl	8001b10 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a8:	f7ff fc32 	bl	8001b10 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e17a      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ba:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d03a      	beq.n	8002348 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d019      	beq.n	800230e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <HAL_RCC_OscConfig+0x274>)
 80022dc:	2201      	movs	r2, #1
 80022de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e0:	f7ff fc16 	bl	8001b10 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e8:	f7ff fc12 	bl	8001b10 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e15a      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fa:	4b0d      	ldr	r3, [pc, #52]	; (8002330 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002306:	2001      	movs	r0, #1
 8002308:	f000 fa9a 	bl	8002840 <RCC_Delay>
 800230c:	e01c      	b.n	8002348 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_RCC_OscConfig+0x274>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002314:	f7ff fbfc 	bl	8001b10 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800231a:	e00f      	b.n	800233c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800231c:	f7ff fbf8 	bl	8001b10 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d908      	bls.n	800233c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e140      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000
 8002334:	42420000 	.word	0x42420000
 8002338:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233c:	4b9e      	ldr	r3, [pc, #632]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1e9      	bne.n	800231c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80a6 	beq.w	80024a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235a:	4b97      	ldr	r3, [pc, #604]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10d      	bne.n	8002382 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	4b94      	ldr	r3, [pc, #592]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	4a93      	ldr	r2, [pc, #588]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002370:	61d3      	str	r3, [r2, #28]
 8002372:	4b91      	ldr	r3, [pc, #580]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800237e:	2301      	movs	r3, #1
 8002380:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002382:	4b8e      	ldr	r3, [pc, #568]	; (80025bc <HAL_RCC_OscConfig+0x4f8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238a:	2b00      	cmp	r3, #0
 800238c:	d118      	bne.n	80023c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800238e:	4b8b      	ldr	r3, [pc, #556]	; (80025bc <HAL_RCC_OscConfig+0x4f8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a8a      	ldr	r2, [pc, #552]	; (80025bc <HAL_RCC_OscConfig+0x4f8>)
 8002394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800239a:	f7ff fbb9 	bl	8001b10 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a2:	f7ff fbb5 	bl	8001b10 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b64      	cmp	r3, #100	; 0x64
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e0fd      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b4:	4b81      	ldr	r3, [pc, #516]	; (80025bc <HAL_RCC_OscConfig+0x4f8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d106      	bne.n	80023d6 <HAL_RCC_OscConfig+0x312>
 80023c8:	4b7b      	ldr	r3, [pc, #492]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	4a7a      	ldr	r2, [pc, #488]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6213      	str	r3, [r2, #32]
 80023d4:	e02d      	b.n	8002432 <HAL_RCC_OscConfig+0x36e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x334>
 80023de:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4a75      	ldr	r2, [pc, #468]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	6213      	str	r3, [r2, #32]
 80023ea:	4b73      	ldr	r3, [pc, #460]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4a72      	ldr	r2, [pc, #456]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	f023 0304 	bic.w	r3, r3, #4
 80023f4:	6213      	str	r3, [r2, #32]
 80023f6:	e01c      	b.n	8002432 <HAL_RCC_OscConfig+0x36e>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b05      	cmp	r3, #5
 80023fe:	d10c      	bne.n	800241a <HAL_RCC_OscConfig+0x356>
 8002400:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	4a6c      	ldr	r2, [pc, #432]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002406:	f043 0304 	orr.w	r3, r3, #4
 800240a:	6213      	str	r3, [r2, #32]
 800240c:	4b6a      	ldr	r3, [pc, #424]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4a69      	ldr	r2, [pc, #420]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6213      	str	r3, [r2, #32]
 8002418:	e00b      	b.n	8002432 <HAL_RCC_OscConfig+0x36e>
 800241a:	4b67      	ldr	r3, [pc, #412]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4a66      	ldr	r2, [pc, #408]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	6213      	str	r3, [r2, #32]
 8002426:	4b64      	ldr	r3, [pc, #400]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4a63      	ldr	r2, [pc, #396]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800242c:	f023 0304 	bic.w	r3, r3, #4
 8002430:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d015      	beq.n	8002466 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243a:	f7ff fb69 	bl	8001b10 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002440:	e00a      	b.n	8002458 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f7ff fb65 	bl	8001b10 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002450:	4293      	cmp	r3, r2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e0ab      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002458:	4b57      	ldr	r3, [pc, #348]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0ee      	beq.n	8002442 <HAL_RCC_OscConfig+0x37e>
 8002464:	e014      	b.n	8002490 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002466:	f7ff fb53 	bl	8001b10 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800246c:	e00a      	b.n	8002484 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f7ff fb4f 	bl	8001b10 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f241 3288 	movw	r2, #5000	; 0x1388
 800247c:	4293      	cmp	r3, r2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e095      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002484:	4b4c      	ldr	r3, [pc, #304]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1ee      	bne.n	800246e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002490:	7dfb      	ldrb	r3, [r7, #23]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d105      	bne.n	80024a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002496:	4b48      	ldr	r3, [pc, #288]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	4a47      	ldr	r2, [pc, #284]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800249c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8081 	beq.w	80025ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ac:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d061      	beq.n	800257c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d146      	bne.n	800254e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c0:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <HAL_RCC_OscConfig+0x4fc>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c6:	f7ff fb23 	bl	8001b10 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ce:	f7ff fb1f 	bl	8001b10 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e067      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e0:	4b35      	ldr	r3, [pc, #212]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f0      	bne.n	80024ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f4:	d108      	bne.n	8002508 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024f6:	4b30      	ldr	r3, [pc, #192]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	492d      	ldr	r1, [pc, #180]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a19      	ldr	r1, [r3, #32]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	430b      	orrs	r3, r1
 800251a:	4927      	ldr	r1, [pc, #156]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800251c:	4313      	orrs	r3, r2
 800251e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002520:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <HAL_RCC_OscConfig+0x4fc>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002526:	f7ff faf3 	bl	8001b10 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252e:	f7ff faef 	bl	8001b10 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e037      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x46a>
 800254c:	e02f      	b.n	80025ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254e:	4b1c      	ldr	r3, [pc, #112]	; (80025c0 <HAL_RCC_OscConfig+0x4fc>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7ff fadc 	bl	8001b10 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255c:	f7ff fad8 	bl	8001b10 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e020      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256e:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x498>
 800257a:	e018      	b.n	80025ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d101      	bne.n	8002588 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e013      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_OscConfig+0x4f4>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	429a      	cmp	r2, r3
 800259a:	d106      	bne.n	80025aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d001      	beq.n	80025ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40007000 	.word	0x40007000
 80025c0:	42420060 	.word	0x42420060

080025c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0d0      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d8:	4b6a      	ldr	r3, [pc, #424]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d910      	bls.n	8002608 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e6:	4b67      	ldr	r3, [pc, #412]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 0207 	bic.w	r2, r3, #7
 80025ee:	4965      	ldr	r1, [pc, #404]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	4b63      	ldr	r3, [pc, #396]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d001      	beq.n	8002608 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0b8      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d020      	beq.n	8002656 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002620:	4b59      	ldr	r3, [pc, #356]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4a58      	ldr	r2, [pc, #352]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800262a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002638:	4b53      	ldr	r3, [pc, #332]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4a52      	ldr	r2, [pc, #328]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002642:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002644:	4b50      	ldr	r3, [pc, #320]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	494d      	ldr	r1, [pc, #308]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d040      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d107      	bne.n	800267a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d115      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e07f      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d107      	bne.n	8002692 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	4b41      	ldr	r3, [pc, #260]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e073      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002692:	4b3d      	ldr	r3, [pc, #244]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e06b      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026a2:	4b39      	ldr	r3, [pc, #228]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f023 0203 	bic.w	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4936      	ldr	r1, [pc, #216]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b4:	f7ff fa2c 	bl	8001b10 <HAL_GetTick>
 80026b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026bc:	f7ff fa28 	bl	8001b10 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e053      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d2:	4b2d      	ldr	r3, [pc, #180]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 020c 	and.w	r2, r3, #12
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d1eb      	bne.n	80026bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e4:	4b27      	ldr	r3, [pc, #156]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d210      	bcs.n	8002714 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 0207 	bic.w	r2, r3, #7
 80026fa:	4922      	ldr	r1, [pc, #136]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_RCC_ClockConfig+0x1c0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e032      	b.n	800277a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002720:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4916      	ldr	r1, [pc, #88]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800273e:	4b12      	ldr	r3, [pc, #72]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	490e      	ldr	r1, [pc, #56]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002752:	f000 f821 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8002756:	4602      	mov	r2, r0
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	490a      	ldr	r1, [pc, #40]	; (800278c <HAL_RCC_ClockConfig+0x1c8>)
 8002764:	5ccb      	ldrb	r3, [r1, r3]
 8002766:	fa22 f303 	lsr.w	r3, r2, r3
 800276a:	4a09      	ldr	r2, [pc, #36]	; (8002790 <HAL_RCC_ClockConfig+0x1cc>)
 800276c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_RCC_ClockConfig+0x1d0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff f98a 	bl	8001a8c <HAL_InitTick>

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40022000 	.word	0x40022000
 8002788:	40021000 	.word	0x40021000
 800278c:	080030bc 	.word	0x080030bc
 8002790:	2000000c 	.word	0x2000000c
 8002794:	20000010 	.word	0x20000010

08002798 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	2300      	movs	r3, #0
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027b2:	4b1e      	ldr	r3, [pc, #120]	; (800282c <HAL_RCC_GetSysClockFreq+0x94>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d002      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x30>
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d003      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0x36>
 80027c6:	e027      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027c8:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ca:	613b      	str	r3, [r7, #16]
      break;
 80027cc:	e027      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	0c9b      	lsrs	r3, r3, #18
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	4a17      	ldr	r2, [pc, #92]	; (8002834 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027d8:	5cd3      	ldrb	r3, [r2, r3]
 80027da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d010      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <HAL_RCC_GetSysClockFreq+0x94>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	0c5b      	lsrs	r3, r3, #17
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	4a11      	ldr	r2, [pc, #68]	; (8002838 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027f2:	5cd3      	ldrb	r3, [r2, r3]
 80027f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a0d      	ldr	r2, [pc, #52]	; (8002830 <HAL_RCC_GetSysClockFreq+0x98>)
 80027fa:	fb02 f203 	mul.w	r2, r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	e004      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a0c      	ldr	r2, [pc, #48]	; (800283c <HAL_RCC_GetSysClockFreq+0xa4>)
 800280c:	fb02 f303 	mul.w	r3, r2, r3
 8002810:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	613b      	str	r3, [r7, #16]
      break;
 8002816:	e002      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_RCC_GetSysClockFreq+0x98>)
 800281a:	613b      	str	r3, [r7, #16]
      break;
 800281c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800281e:	693b      	ldr	r3, [r7, #16]
}
 8002820:	4618      	mov	r0, r3
 8002822:	371c      	adds	r7, #28
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	007a1200 	.word	0x007a1200
 8002834:	080030cc 	.word	0x080030cc
 8002838:	080030dc 	.word	0x080030dc
 800283c:	003d0900 	.word	0x003d0900

08002840 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002848:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <RCC_Delay+0x34>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <RCC_Delay+0x38>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0a5b      	lsrs	r3, r3, #9
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	fb02 f303 	mul.w	r3, r2, r3
 800285a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800285c:	bf00      	nop
  }
  while (Delay --);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1e5a      	subs	r2, r3, #1
 8002862:	60fa      	str	r2, [r7, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f9      	bne.n	800285c <RCC_Delay+0x1c>
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	2000000c 	.word	0x2000000c
 8002878:	10624dd3 	.word	0x10624dd3

0800287c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e041      	b.n	8002912 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff f85a 	bl	800195c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3304      	adds	r3, #4
 80028b8:	4619      	mov	r1, r3
 80028ba:	4610      	mov	r0, r2
 80028bc:	f000 fa6e 	bl	8002d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	d001      	beq.n	8002934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e035      	b.n	80029a0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a16      	ldr	r2, [pc, #88]	; (80029ac <HAL_TIM_Base_Start_IT+0x90>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d009      	beq.n	800296a <HAL_TIM_Base_Start_IT+0x4e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800295e:	d004      	beq.n	800296a <HAL_TIM_Base_Start_IT+0x4e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <HAL_TIM_Base_Start_IT+0x94>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d111      	bne.n	800298e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b06      	cmp	r3, #6
 800297a:	d010      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298c:	e007      	b.n	800299e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0201 	orr.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40012c00 	.word	0x40012c00
 80029b0:	40000400 	.word	0x40000400

080029b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d122      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d11b      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0202 	mvn.w	r2, #2
 80029e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f9b4 	bl	8002d64 <HAL_TIM_IC_CaptureCallback>
 80029fc:	e005      	b.n	8002a0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f9a7 	bl	8002d52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f9b6 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d122      	bne.n	8002a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d11b      	bne.n	8002a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0204 	mvn.w	r2, #4
 8002a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f98a 	bl	8002d64 <HAL_TIM_IC_CaptureCallback>
 8002a50:	e005      	b.n	8002a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f97d 	bl	8002d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f98c 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d122      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d11b      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0208 	mvn.w	r2, #8
 8002a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f960 	bl	8002d64 <HAL_TIM_IC_CaptureCallback>
 8002aa4:	e005      	b.n	8002ab2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f953 	bl	8002d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f962 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d122      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d11b      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0210 	mvn.w	r2, #16
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f936 	bl	8002d64 <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f929 	bl	8002d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f938 	bl	8002d76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10e      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d107      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0201 	mvn.w	r2, #1
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fe fe3e 	bl	80017b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	2b80      	cmp	r3, #128	; 0x80
 8002b44:	d10e      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b50:	2b80      	cmp	r3, #128	; 0x80
 8002b52:	d107      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fa6b 	bl	800303a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d10e      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7c:	2b40      	cmp	r3, #64	; 0x40
 8002b7e:	d107      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f8fc 	bl	8002d88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d10e      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d107      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0220 	mvn.w	r2, #32
 8002bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fa36 	bl	8003028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_TIM_ConfigClockSource+0x1c>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e0b4      	b.n	8002d4a <HAL_TIM_ConfigClockSource+0x186>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c18:	d03e      	beq.n	8002c98 <HAL_TIM_ConfigClockSource+0xd4>
 8002c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c1e:	f200 8087 	bhi.w	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c26:	f000 8086 	beq.w	8002d36 <HAL_TIM_ConfigClockSource+0x172>
 8002c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2e:	d87f      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c30:	2b70      	cmp	r3, #112	; 0x70
 8002c32:	d01a      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0xa6>
 8002c34:	2b70      	cmp	r3, #112	; 0x70
 8002c36:	d87b      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c38:	2b60      	cmp	r3, #96	; 0x60
 8002c3a:	d050      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0x11a>
 8002c3c:	2b60      	cmp	r3, #96	; 0x60
 8002c3e:	d877      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c40:	2b50      	cmp	r3, #80	; 0x50
 8002c42:	d03c      	beq.n	8002cbe <HAL_TIM_ConfigClockSource+0xfa>
 8002c44:	2b50      	cmp	r3, #80	; 0x50
 8002c46:	d873      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c48:	2b40      	cmp	r3, #64	; 0x40
 8002c4a:	d058      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x13a>
 8002c4c:	2b40      	cmp	r3, #64	; 0x40
 8002c4e:	d86f      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c50:	2b30      	cmp	r3, #48	; 0x30
 8002c52:	d064      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x15a>
 8002c54:	2b30      	cmp	r3, #48	; 0x30
 8002c56:	d86b      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d060      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x15a>
 8002c5c:	2b20      	cmp	r3, #32
 8002c5e:	d867      	bhi.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d05c      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x15a>
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d05a      	beq.n	8002d1e <HAL_TIM_ConfigClockSource+0x15a>
 8002c68:	e062      	b.n	8002d30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6899      	ldr	r1, [r3, #8]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f000 f95e 	bl	8002f3a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	609a      	str	r2, [r3, #8]
      break;
 8002c96:	e04f      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	6899      	ldr	r1, [r3, #8]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f000 f947 	bl	8002f3a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cba:	609a      	str	r2, [r3, #8]
      break;
 8002cbc:	e03c      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6818      	ldr	r0, [r3, #0]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	6859      	ldr	r1, [r3, #4]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f000 f8be 	bl	8002e4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2150      	movs	r1, #80	; 0x50
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f915 	bl	8002f06 <TIM_ITRx_SetConfig>
      break;
 8002cdc:	e02c      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6859      	ldr	r1, [r3, #4]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	461a      	mov	r2, r3
 8002cec:	f000 f8dc 	bl	8002ea8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2160      	movs	r1, #96	; 0x60
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 f905 	bl	8002f06 <TIM_ITRx_SetConfig>
      break;
 8002cfc:	e01c      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6859      	ldr	r1, [r3, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f000 f89e 	bl	8002e4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2140      	movs	r1, #64	; 0x40
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f8f5 	bl	8002f06 <TIM_ITRx_SetConfig>
      break;
 8002d1c:	e00c      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4619      	mov	r1, r3
 8002d28:	4610      	mov	r0, r2
 8002d2a:	f000 f8ec 	bl	8002f06 <TIM_ITRx_SetConfig>
      break;
 8002d2e:	e003      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
      break;
 8002d34:	e000      	b.n	8002d38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr
	...

08002d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a25      	ldr	r2, [pc, #148]	; (8002e44 <TIM_Base_SetConfig+0xa8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d007      	beq.n	8002dc4 <TIM_Base_SetConfig+0x28>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dba:	d003      	beq.n	8002dc4 <TIM_Base_SetConfig+0x28>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a22      	ldr	r2, [pc, #136]	; (8002e48 <TIM_Base_SetConfig+0xac>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d108      	bne.n	8002dd6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a1a      	ldr	r2, [pc, #104]	; (8002e44 <TIM_Base_SetConfig+0xa8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d007      	beq.n	8002dee <TIM_Base_SetConfig+0x52>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de4:	d003      	beq.n	8002dee <TIM_Base_SetConfig+0x52>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a17      	ldr	r2, [pc, #92]	; (8002e48 <TIM_Base_SetConfig+0xac>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d108      	bne.n	8002e00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a07      	ldr	r2, [pc, #28]	; (8002e44 <TIM_Base_SetConfig+0xa8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d103      	bne.n	8002e34 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	615a      	str	r2, [r3, #20]
}
 8002e3a:	bf00      	nop
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	40012c00 	.word	0x40012c00
 8002e48:	40000400 	.word	0x40000400

08002e4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	f023 0201 	bic.w	r2, r3, #1
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f023 030a 	bic.w	r3, r3, #10
 8002e88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	621a      	str	r2, [r3, #32]
}
 8002e9e:	bf00      	nop
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	f023 0210 	bic.w	r2, r3, #16
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	031b      	lsls	r3, r3, #12
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ee4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	621a      	str	r2, [r3, #32]
}
 8002efc:	bf00      	nop
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr

08002f06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b085      	sub	sp, #20
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f043 0307 	orr.w	r3, r3, #7
 8002f28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	609a      	str	r2, [r3, #8]
}
 8002f30:	bf00      	nop
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr

08002f3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b087      	sub	sp, #28
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	021a      	lsls	r2, r3, #8
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	609a      	str	r2, [r3, #8]
}
 8002f6e:	bf00      	nop
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e041      	b.n	8003014 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a14      	ldr	r2, [pc, #80]	; (8003020 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d009      	beq.n	8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fdc:	d004      	beq.n	8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a10      	ldr	r2, [pc, #64]	; (8003024 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d10c      	bne.n	8003002 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40012c00 	.word	0x40012c00
 8003024:	40000400 	.word	0x40000400

08003028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <__libc_init_array>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	2600      	movs	r6, #0
 8003050:	4d0c      	ldr	r5, [pc, #48]	; (8003084 <__libc_init_array+0x38>)
 8003052:	4c0d      	ldr	r4, [pc, #52]	; (8003088 <__libc_init_array+0x3c>)
 8003054:	1b64      	subs	r4, r4, r5
 8003056:	10a4      	asrs	r4, r4, #2
 8003058:	42a6      	cmp	r6, r4
 800305a:	d109      	bne.n	8003070 <__libc_init_array+0x24>
 800305c:	f000 f822 	bl	80030a4 <_init>
 8003060:	2600      	movs	r6, #0
 8003062:	4d0a      	ldr	r5, [pc, #40]	; (800308c <__libc_init_array+0x40>)
 8003064:	4c0a      	ldr	r4, [pc, #40]	; (8003090 <__libc_init_array+0x44>)
 8003066:	1b64      	subs	r4, r4, r5
 8003068:	10a4      	asrs	r4, r4, #2
 800306a:	42a6      	cmp	r6, r4
 800306c:	d105      	bne.n	800307a <__libc_init_array+0x2e>
 800306e:	bd70      	pop	{r4, r5, r6, pc}
 8003070:	f855 3b04 	ldr.w	r3, [r5], #4
 8003074:	4798      	blx	r3
 8003076:	3601      	adds	r6, #1
 8003078:	e7ee      	b.n	8003058 <__libc_init_array+0xc>
 800307a:	f855 3b04 	ldr.w	r3, [r5], #4
 800307e:	4798      	blx	r3
 8003080:	3601      	adds	r6, #1
 8003082:	e7f2      	b.n	800306a <__libc_init_array+0x1e>
 8003084:	080030e0 	.word	0x080030e0
 8003088:	080030e0 	.word	0x080030e0
 800308c:	080030e0 	.word	0x080030e0
 8003090:	080030e4 	.word	0x080030e4

08003094 <memset>:
 8003094:	4603      	mov	r3, r0
 8003096:	4402      	add	r2, r0
 8003098:	4293      	cmp	r3, r2
 800309a:	d100      	bne.n	800309e <memset+0xa>
 800309c:	4770      	bx	lr
 800309e:	f803 1b01 	strb.w	r1, [r3], #1
 80030a2:	e7f9      	b.n	8003098 <memset+0x4>

080030a4 <_init>:
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	bf00      	nop
 80030a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030aa:	bc08      	pop	{r3}
 80030ac:	469e      	mov	lr, r3
 80030ae:	4770      	bx	lr

080030b0 <_fini>:
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	bf00      	nop
 80030b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b6:	bc08      	pop	{r3}
 80030b8:	469e      	mov	lr, r3
 80030ba:	4770      	bx	lr
